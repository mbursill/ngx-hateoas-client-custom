{"version":3,"file":"lagoshny-ngx-hateoas-client.mjs","sources":["../../../projects/ngx-hateoas-client/src/lib/util/dependency-injector.ts","../../../projects/ngx-hateoas-client/src/lib/config/lib-config.ts","../../../projects/ngx-hateoas-client/src/lib/logger/console-logger.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource-type.ts","../../../projects/ngx-hateoas-client/src/lib/model/declarations.ts","../../../projects/ngx-hateoas-client/src/lib/logger/stage.enum.ts","../../../projects/ngx-hateoas-client/src/lib/logger/stage-logger.ts","../../../projects/ngx-hateoas-client/src/lib/util/validation.utils.ts","../../../projects/ngx-hateoas-client/src/lib/util/url.utils.ts","../../../projects/ngx-hateoas-client/src/lib/util/resource.utils.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/cache/model/cache-key.ts","../../../projects/ngx-hateoas-client/src/lib/service/http-executor.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/cache/model/cached-resource.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/cache/resource-cache.service.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/resource-http.service.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource/abstract-resource.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/resource-collection-http.service.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/paged-resource-collection-http.service.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource/base-resource.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource/resource.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource/resource-collection.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource/embedded-resource.ts","../../../projects/ngx-hateoas-client/src/lib/model/resource/paged-resource-collection.ts","../../../projects/ngx-hateoas-client/src/lib/config/ngx-hateoas-client-configuration.service.ts","../../../projects/ngx-hateoas-client/src/lib/service/internal/common-resource-http.service.ts","../../../projects/ngx-hateoas-client/src/lib/service/external/hateoas-resource.service.ts","../../../projects/ngx-hateoas-client/src/lib/service/external/hateoas-resource-operation.ts","../../../projects/ngx-hateoas-client/src/lib/model/decorators.ts","../../../projects/ngx-hateoas-client/src/lib/ngx-hateoas-client.module.ts","../../../projects/ngx-hateoas-client/src/public-api.ts","../../../projects/ngx-hateoas-client/src/lagoshny-ngx-hateoas-client.ts"],"sourcesContent":["import { Injector, Type } from '@angular/core';\r\n\r\n/**\r\n * Holds dependency injector to allow use ัะต in internal the lib classes.\r\n */\r\n/* tslint:disable:variable-name */\r\nexport class DependencyInjector {\r\n\r\n  private static _injector: Injector = null;\r\n\r\n  static get<T>(type: Type<T>): T {\r\n    if (this._injector) {\r\n      return this._injector.get(type);\r\n    }\r\n    throw new Error('You need initialize Injector');\r\n  }\r\n\r\n  static set injector(value: Injector) {\r\n    this._injector = value;\r\n  }\r\n\r\n}\r\n","import { HateoasConfiguration } from './hateoas-configuration.interface';\r\n\r\n/**\r\n * Contains all configuration lib params.\r\n */\r\nexport class LibConfig {\r\n\r\n  public static readonly DEFAULT_CONFIG = {\r\n    http: {\r\n      rootUrl: 'http://localhost:8080/api/v1'\r\n    },\r\n    logs: {\r\n      verboseLogs: false\r\n    },\r\n    cache: {\r\n      enabled: true,\r\n      lifeTime: 5 * 60 * 1000\r\n    },\r\n    useTypes: {\r\n      resources: []\r\n    },\r\n    pagination: {\r\n      defaultPage: {\r\n        size: 20,\r\n        page: 0\r\n      }\r\n    },\r\n    isProduction: false\r\n  };\r\n\r\n  public static config: HateoasConfiguration = LibConfig.DEFAULT_CONFIG;\r\n\r\n  public static setConfig(hateoasConfiguration: HateoasConfiguration) {\r\n    LibConfig.config = {\r\n      ...LibConfig.DEFAULT_CONFIG,\r\n      ...hateoasConfiguration\r\n    };\r\n  }\r\n\r\n}\r\n","import { LibConfig } from '../config/lib-config';\r\nimport { camelCase, capitalize, isEmpty } from 'lodash-es';\r\n\r\n/* tslint:disable:variable-name no-console */\r\nexport class ConsoleLogger {\r\n\r\n  public static info(message?: any, ...optionalParams: any[]): void {\r\n    if (!LibConfig.config.logs.verboseLogs && !LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    console.info(message, ...optionalParams);\r\n  }\r\n\r\n  public static warn(message?: any, ...optionalParams: any[]): void {\r\n    if (LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    console.warn(message, ...optionalParams);\r\n  }\r\n\r\n  public static error(message?: any, ...optionalParams: any[]): void {\r\n    if (LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    console.error(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Log info messages in pretty format.\r\n   *\r\n   * @param message log message\r\n   * @param params additional params for verbose log\r\n   */\r\n  public static prettyInfo(message: string, params?: object): void {\r\n    if (!LibConfig.config.logs.verboseLogs && !LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n\r\n    let msg = `%c${ message }\\n`;\r\n    const color = [\r\n      'color: #201AB3;'\r\n    ];\r\n\r\n    if (!isEmpty(params)) {\r\n      for (const [key, value] of Object.entries(params)) {\r\n        if (key.toLowerCase() === 'result') {\r\n          msg += `%c${ capitalize(key) }: %c${ value }\\n`;\r\n          color.push('color: #3AA6D0;', 'color: #00BA45;');\r\n        } else {\r\n          msg += `%c${ camelCase(key) }: %c${ value }\\n`;\r\n          color.push('color: #3AA6D0;', 'color: default;');\r\n        }\r\n      }\r\n    }\r\n\r\n    ConsoleLogger.info(msg, ...color);\r\n  }\r\n\r\n  /**\r\n   * Log resource info messages in pretty format.\r\n   *\r\n   * @param message log message\r\n   * @param resourceName resource name\r\n   * @param params additional params for verbose log\r\n   */\r\n  public static resourcePrettyInfo(resourceName: string, message: string, params?: object): void {\r\n    if (!LibConfig.config.logs.verboseLogs && !LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n\r\n    let msg = `%c${ resourceName } %c${ message }\\n`;\r\n    const color = [\r\n      'color: #DA005C;',\r\n      'color: #201AB3;'\r\n    ];\r\n\r\n    if (!isEmpty(params)) {\r\n      for (const [key, value] of Object.entries(params)) {\r\n        if (key.toLowerCase() === 'result') {\r\n          msg += `%c${ capitalize(key) }: %c${ value }\\n`;\r\n          color.push('color: #3AA6D0;', 'color: #00BA45;');\r\n        } else {\r\n          msg += `%c${ camelCase(key) }: %c${ value }\\n`;\r\n          color.push('color: #3AA6D0;', 'color: default;');\r\n        }\r\n      }\r\n    }\r\n\r\n    ConsoleLogger.info(msg, ...color);\r\n  }\r\n\r\n  /**\r\n   * Log error messages in pretty format.\r\n   *\r\n   * @param message log message\r\n   * @param params additional params for verbose log\r\n   */\r\n  public static prettyError(message: string, params?: object): void {\r\n    if (LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n\r\n    let msg = `%c${ message }\\n`;\r\n    const color = [\r\n      'color: #df004f;'\r\n    ];\r\n\r\n    if (!isEmpty(params)) {\r\n      for (const [key, value] of Object.entries(params)) {\r\n        if (key.toLowerCase() === 'error') {\r\n          msg += `%c${ capitalize(key) }: %c${ value }\\n`;\r\n          color.push('color: #df004f;', 'color: #ff0000;');\r\n        } else {\r\n          msg += `%c${ capitalize(key) }: %c${ value }\\n`;\r\n          color.push('color: #3AA6D0;', 'color: #000;');\r\n        }\r\n      }\r\n    }\r\n\r\n    ConsoleLogger.error(msg, ...color);\r\n  }\r\n\r\n  /**\r\n   * Log warn messages in pretty format.\r\n   *\r\n   * @param message log message\r\n   * @param params additional params for verbose log\r\n   */\r\n  public static prettyWarn(message: string, params?: object): void {\r\n    if (LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n\r\n    let msg = `%c${ message }\\n`;\r\n    const color = [\r\n      'color: #ffbe00;'\r\n    ];\r\n\r\n    if (!isEmpty(params)) {\r\n      for (const [key, value] of Object.entries(params)) {\r\n        msg += `%c${ capitalize(key) }: %c${ value }\\n`;\r\n        color.push('color: #3AA6D0;', 'color: #000;');\r\n      }\r\n    }\r\n\r\n    ConsoleLogger.warn(msg, ...color);\r\n  }\r\n\r\n}\r\n","import { isObject } from 'lodash-es';\r\n\r\nexport function isEmbeddedResource(object: any) {\r\n  // Embedded resource doesn't have self link in _links object\r\n  return !isPagedResourceCollection(object) && !isResourceCollection(object) && isResourceObject(object) && !('self' in object._links);\r\n}\r\n\r\nexport function isResource(object: any): boolean {\r\n  return !isPagedResourceCollection(object) && !isResourceCollection(object) && isResourceObject(object) && ('self' in object._links);\r\n}\r\n\r\nexport function isResourceCollection(object: any): boolean {\r\n  return isObject(object) &&\r\n         ('_embedded' in object) &&\r\n         ('_links' in object) &&\r\n         !('page' in object) &&\r\n         (Object.keys(object).length === 2);\r\n}\r\n\r\nexport function isPagedResourceCollection(object: any): boolean {\r\n  return isObject(object) &&\r\n         ('_embedded' in object) &&\r\n         ('_links' in object) &&\r\n         ('page' in object) &&\r\n         (Object.keys(object).length === 3);\r\n}\r\n\r\n/**\r\n * Check that passed object has links property.\r\n *\r\n * @param object which need to check links property\r\n */\r\nexport function isResourceObject(object: any) {\r\n  return isObject(object) && ('_links' in object);\r\n}\r\n\r\n/**\r\n * Defining resource type bypassed object.\r\n *\r\n * @param object that presumably is one of resource type\r\n */\r\nexport function getResourceType(object: any): string {\r\n  if (isEmbeddedResource(object)) {\r\n    return 'EmbeddedResource';\r\n  } else if (isResource(object)) {\r\n    return 'Resource';\r\n  } else if (isResourceCollection(object)) {\r\n    return 'ResourceCollection';\r\n  } else if (isPagedResourceCollection(object)) {\r\n    return 'PagedResourceCollection';\r\n  } else {\r\n    return 'Unknown';\r\n  }\r\n}\r\n","import { Resource } from './resource/resource';\r\nimport { BaseResource } from './resource/base-resource';\r\nimport { EmbeddedResource } from './resource/embedded-resource';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n/**\r\n * Resource link object.\r\n */\r\nexport interface Link {\r\n  /**\r\n   * Link name.\r\n   */\r\n  [key: string]: LinkData;\r\n}\r\n\r\nexport interface LinkData {\r\n  /**\r\n   * Link url.\r\n   */\r\n  href: string;\r\n  /**\r\n   * {@code true} if <b>href</b> has template, {@code false} otherwise.\r\n   */\r\n  templated?: boolean;\r\n}\r\n\r\n/**\r\n * Interface that allows to identify that object is resource when it is has a links object.\r\n */\r\nexport interface ResourceIdentifiable {\r\n\r\n  /**\r\n   * List of links related with the resource.\r\n   */\r\n  _links: Link;\r\n}\r\n\r\n/**\r\n * Http options that used by Angular HttpClient.\r\n */\r\nexport interface HttpClientOptions {\r\n  headers?: HttpHeaders | {\r\n    [header: string]: string | string[];\r\n  };\r\n  observe?: 'body' | 'response';\r\n  params?: HttpParams;\r\n  reportProgress?: boolean;\r\n  responseType?: 'json';\r\n  withCredentials?: boolean;\r\n}\r\n\r\n/**\r\n * Extend {@link GetOption} with page param.\r\n */\r\nexport interface PagedGetOption extends GetOption {\r\n  pageParams?: PageParam;\r\n}\r\n\r\n/**\r\n * Contains options that can be applied to POST/PUT/PATCH/DELETE request.\r\n */\r\nexport interface RequestOption {\r\n  params?: RequestParam;\r\n  headers?: HttpHeaders | {\r\n    [header: string]: string | string[];\r\n  };\r\n  observe?: 'body' | 'response';\r\n  reportProgress?: boolean;\r\n  withCredentials?: boolean;\r\n}\r\n\r\n/**\r\n * Contains additional options that can be applied to the GET request.\r\n */\r\nexport interface GetOption extends RequestOption {\r\n  /**\r\n   * Sorting options.\r\n   */\r\n  sort?: Sort;\r\n  useCache?: boolean;\r\n}\r\n\r\n/**\r\n * Request params that will be applied to the result url as http request params.\r\n *\r\n * Should not contains params as: 'projection' and {@link PageParam} properties.\r\n * If want pass this params then use suitable properties from {@link GetOption} or {@link PagedGetOption},\r\n * otherwise exception will be thrown.\r\n */\r\nexport interface RequestParam {\r\n  [paramName: string]: Resource | string | number | boolean | Array<string> | Array<number>;\r\n}\r\n\r\n/**\r\n * Page content params.\r\n */\r\nexport interface PageParam {\r\n  /**\r\n   * Number of page.\r\n   */\r\n  page?: number;\r\n\r\n  /**\r\n   * Page size.\r\n   */\r\n  size?: number;\r\n}\r\n\r\n/**\r\n * Page params with sort option.\r\n */\r\nexport interface SortedPageParam {\r\n  /**\r\n   * Page content params.\r\n   */\r\n  pageParams?: PageParam;\r\n  /**\r\n   * Sorting options.\r\n   */\r\n  sort?: Sort;\r\n}\r\n\r\nexport type SortOrder = 'DESC' | 'ASC';\r\n\r\nexport interface Sort {\r\n  /**\r\n   * Name of the property to sort.\r\n   */\r\n  [propertyToSort: string]: SortOrder;\r\n}\r\n\r\n/**\r\n * Page resource response from Spring application.\r\n */\r\nexport interface PageData {\r\n  page: {\r\n    size: number;\r\n    totalElements: number;\r\n    totalPages: number;\r\n    number: number;\r\n  };\r\n  _links?: {\r\n    first: {\r\n      href: string\r\n    };\r\n    prev?: {\r\n      href: string\r\n    };\r\n    self: {\r\n      href: string\r\n    };\r\n    next?: {\r\n      href: string\r\n    };\r\n    last: {\r\n      href: string\r\n    };\r\n  };\r\n}\r\n\r\nexport enum Include {\r\n  NULL_VALUES = 'NULL_VALUES'\r\n}\r\n\r\n/**\r\n * Include options that allow configure should include or not some specific values\r\n * (e.q. null values).\r\n */\r\nexport interface ValuesOption {\r\n  include: Include;\r\n}\r\n\r\n/**\r\n * Request body object.\r\n */\r\nexport interface RequestBody<T> {\r\n  /**\r\n   * Any object that will be passed as request body.\r\n   */\r\n  body: T;\r\n  /**\r\n   * Use this param to influence on body values that you want include or not.\r\n   */\r\n  valuesOption?: ValuesOption;\r\n}\r\n\r\n/**\r\n * Supported http methods for custom query.\r\n */\r\nexport enum HttpMethod {\r\n  GET = 'GET', POST = 'POST', PUT = 'PUT', PATCH = 'PATCH'\r\n}\r\n\r\ntype NonResourcePropertyType<T> = {\r\n  [K in keyof T]: T[K] extends BaseResource ? never : K;\r\n}[keyof T];\r\n\r\n/**\r\n * Type that allowed represent resource relations as resource projection excluding {@link Resource},\r\n * {@link EmbeddedResource} props and methods from current type.\r\n */\r\nexport type ProjectionRelType<T extends BaseResource> =\r\n  Pick<T, Exclude<keyof T, keyof Resource | keyof EmbeddedResource> & NonResourcePropertyType<T>>;\r\n","export enum Stage {\r\n  BEGIN = 'BEGIN',\r\n  PREPARE_URL = 'PREPARE_URL',\r\n  CHECK_PARAMS = 'CHECK_PARAMS',\r\n  PREPARE_PARAMS = 'PREPARE_PARAMS',\r\n  INIT_RESOURCE = 'INIT_RESOURCE',\r\n  RESOLVE_VALUES = 'RESOLVE_VALUES',\r\n  CACHE_PUT = 'CACHE_PUT',\r\n  CACHE_GET = 'CACHE_GET',\r\n  CACHE_EVICT = 'CACHE_EVICT',\r\n  HTTP_REQUEST = 'HTTP_REQUEST',\r\n  HTTP_RESPONSE = 'HTTP_RESPONSE',\r\n  END = 'END'\r\n}\r\n","import { ConsoleLogger } from './console-logger';\r\nimport { Stage } from './stage.enum';\r\nimport { LibConfig } from '../config/lib-config';\r\nimport { capitalize, isEmpty, isNil, isObject, isString } from 'lodash-es';\r\n\r\n/**\r\n * Simplify logger calls.\r\n */\r\n\r\n/* tslint:disable:no-string-literal */\r\nexport class StageLogger {\r\n\r\n  public static resourceBeginLog(resource: object | string, method: string, params?: object): void {\r\n    if (!LibConfig.config.logs.verboseLogs && !LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    const paramToLog = this.prepareParams(params);\r\n\r\n    let resourceName;\r\n    if (isString(resource)) {\r\n      resourceName = resource;\r\n    } else if (!isNil(resource)) {\r\n      resourceName = '__resourceName__' in resource ? resource['__resourceName__'] : 'EmbeddedResource';\r\n    } else {\r\n      resourceName = 'NOT_DEFINED_RESOURCE_NAME';\r\n    }\r\n    ConsoleLogger.resourcePrettyInfo(`${ capitalize(resourceName) } ${ method }`,\r\n      `STAGE ${ Stage.BEGIN }`, paramToLog);\r\n  }\r\n\r\n  public static resourceEndLog(resource: object | string, method: string, params: object): void {\r\n    if (!LibConfig.config.logs.verboseLogs && !LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    const paramToLog = this.prepareParams(params);\r\n\r\n    let resourceName;\r\n    if (isString(resource)) {\r\n      resourceName = resource;\r\n    } else {\r\n      resourceName = '__resourceName__' in resource ? resource['__resourceName__'] : 'EmbeddedResource';\r\n    }\r\n\r\n    ConsoleLogger.resourcePrettyInfo(`${ capitalize(resourceName) } ${ method }`,\r\n      `STAGE ${ Stage.END }`, paramToLog);\r\n  }\r\n\r\n  public static stageLog(stage: Stage, params: object): void {\r\n    if (!LibConfig.config.logs.verboseLogs && !LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    const paramToLog = this.prepareParams(params);\r\n\r\n    ConsoleLogger.prettyInfo(`STAGE ${ stage }`, paramToLog);\r\n  }\r\n\r\n  public static stageErrorLog(stage: Stage, params: object): void {\r\n    if (LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    const paramToLog = this.prepareParams(params);\r\n\r\n    ConsoleLogger.prettyError(`STAGE ${ stage }`, paramToLog);\r\n  }\r\n\r\n  public static stageWarnLog(stage: Stage, params: object): void {\r\n    if (LibConfig.config.isProduction) {\r\n      return;\r\n    }\r\n    const paramToLog = this.prepareParams(params);\r\n\r\n    ConsoleLogger.prettyWarn(`STAGE ${ stage }`, paramToLog);\r\n  }\r\n\r\n  private static prepareParams(params: object) {\r\n    const paramToLog = {};\r\n    if (isEmpty(params)) {\r\n      return paramToLog;\r\n    }\r\n    for (const [key, value] of Object.entries(params)) {\r\n      if (!params.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n      if (isObject(value)) {\r\n        paramToLog[key] = JSON.stringify(value, null, 2);\r\n      } else {\r\n        paramToLog[key] = value;\r\n      }\r\n    }\r\n    return paramToLog;\r\n  }\r\n}\r\n","import { StageLogger } from '../logger/stage-logger';\r\nimport { Stage } from '../logger/stage.enum';\r\nimport { isArray, isEmpty, isFunction, isNil, isObject, isPlainObject, isString } from 'lodash-es';\r\n\r\nexport class ValidationUtils {\r\n\r\n  /**\r\n   * Checks that passed object with params has all valid params.\r\n   * Params should not has null, undefined, empty object, empty string values.\r\n   *\r\n   * @param params object with params to check\r\n   * @throws error if any params are not defined\r\n   */\r\n  public static validateInputParams(params: object): void {\r\n    if (isNil(params)) {\r\n      const errMsg = 'Passed params object is not valid';\r\n      StageLogger.stageErrorLog(Stage.CHECK_PARAMS, {error: errMsg});\r\n      throw new Error(errMsg);\r\n    }\r\n\r\n    const notValidParams = [];\r\n    for (const [key, value] of Object.entries(params)) {\r\n      // tslint:disable-next-line:no-string-literal\r\n      if (isFunction(value) && isFunction(value.constructor) && !value['__resourceName__']) {\r\n        throw new Error(`Resource '${ value.name }' has not 'resourceName' value. Set it with @HateoasResource decorator on '${ value.name }' class.`);\r\n      }\r\n\r\n      if (isNil(value)\r\n        || (isString(value) && !value)\r\n        || (isPlainObject(value) && isEmpty(value))\r\n        || (isArray(value) && value.length === 0)) {\r\n\r\n        let formattedValue = value;\r\n        if (isObject(value)) {\r\n          formattedValue = JSON.stringify(value, null, 2);\r\n        }\r\n        notValidParams.push(`'${ key } = ${ formattedValue }'`);\r\n      }\r\n    }\r\n    if (notValidParams.length > 0) {\r\n      const errMsg = `Passed param(s) ${ notValidParams.join(', ') } ${ notValidParams.length > 1 ? 'are' : 'is' } not valid`;\r\n      StageLogger.stageErrorLog(Stage.CHECK_PARAMS, {error: errMsg});\r\n      throw new Error(errMsg);\r\n    }\r\n  }\r\n\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { isResource } from '../model/resource-type';\r\nimport { Resource } from '../model/resource/resource';\r\nimport { GetOption, HttpClientOptions, LinkData, PagedGetOption, Sort } from '../model/declarations';\r\nimport { ValidationUtils } from './validation.utils';\r\nimport { LibConfig } from '../config/lib-config';\r\nimport { isArray, isEmpty, isNil, isObject, toString } from 'lodash-es';\r\nimport { UriTemplate } from 'uri-templates-es';\r\n\r\nexport class UrlUtils {\r\n\r\n  /**\r\n   * Convert passed params to the {@link HttpParams}.\r\n   *\r\n   * @param options which need to convert\r\n   * @param httpParams (optional) if passed then will be applied to this one, otherwise created a new one\r\n   */\r\n  public static convertToHttpParams(options: PagedGetOption, httpParams?: HttpParams): HttpParams {\r\n    let resultParams = httpParams ? httpParams : new HttpParams();\r\n    if (isEmpty(options) || isNil(options)) {\r\n      return resultParams;\r\n    }\r\n    UrlUtils.checkDuplicateParams(options);\r\n\r\n    if (isObject(options.params) && !isEmpty(options.params)) {\r\n      for (const [key, value] of Object.entries(options.params)) {\r\n        if (options.params.hasOwnProperty(key)) {\r\n          if (isResource(value)) {\r\n            // Append resource as resource link\r\n            resultParams = resultParams.append(key, (value as Resource).getSelfLinkHref());\r\n          } else if (isArray(options.params[key])) {\r\n            // Append arrays params as repeated key with each value from array\r\n            (options.params[key] as Array<any>).forEach((item) => {\r\n              resultParams = resultParams.append(`${ key.toString() }`, item);\r\n            });\r\n          } else {\r\n            // Else append simple param as is\r\n            resultParams = resultParams.append(key, value.toString());\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isEmpty(options.pageParams)) {\r\n      resultParams = resultParams.append('page', toString(options.pageParams.page));\r\n      resultParams = resultParams.append('size', toString(options.pageParams.size));\r\n    }\r\n    if (!isEmpty(options.sort)) {\r\n      resultParams = UrlUtils.generateSortParams(options.sort, resultParams);\r\n    }\r\n\r\n    return resultParams;\r\n  }\r\n\r\n  /**\r\n   * Convert ngx-hateoas-client option to Angular HttpClient.\r\n   * @param options ngx-hateoas-client options\r\n   */\r\n  public static convertToHttpOptions(options: PagedGetOption): HttpClientOptions {\r\n    if (isEmpty(options) || isNil(options)) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      params: UrlUtils.convertToHttpParams(options),\r\n      headers: options.headers,\r\n      observe: options.observe,\r\n      reportProgress: options.reportProgress,\r\n      withCredentials: options.withCredentials,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate link url.\r\n   * If proxyUrl is not empty then relation url will be use proxy.\r\n   *\r\n   * @param relationLink resource link to which need to generate the url\r\n   * @param options (optional) additional options that should be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public static generateLinkUrl(relationLink: LinkData, options?: PagedGetOption): string {\r\n    ValidationUtils.validateInputParams({relationLink, linkUrl: relationLink?.href});\r\n    let url;\r\n    if (options && !isEmpty(options)) {\r\n      url = relationLink.templated ? UrlUtils.fillTemplateParams(relationLink.href, options) : relationLink.href;\r\n    } else {\r\n      url = relationLink.templated ? UrlUtils.removeTemplateParams(relationLink.href) : relationLink.href;\r\n    }\r\n    if (LibConfig.config.http.proxyUrl) {\r\n      return url.replace(LibConfig.config.http.rootUrl, LibConfig.config.http.proxyUrl);\r\n    }\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   * Return server api url based on proxy url when it is not empty or root url otherwise.\r\n   */\r\n  public static getApiUrl(): string {\r\n    if (LibConfig.config.http.proxyUrl) {\r\n      return LibConfig.config.http.proxyUrl;\r\n    } else {\r\n      return LibConfig.config.http.rootUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate url use base and the resource name.\r\n   *\r\n   * @param baseUrl will be as first part as a result url\r\n   * @param resourceName added to the base url through slash\r\n   * @param query (optional) if passed then adds to end of the url\r\n   * @throws error when required params are not valid\r\n   */\r\n  public static generateResourceUrl(baseUrl: string, resourceName: string, query?: string): string {\r\n    ValidationUtils.validateInputParams({baseUrl, resourceName});\r\n\r\n    let url = baseUrl;\r\n    if (!url.endsWith('/')) {\r\n      url = url.concat('/');\r\n    }\r\n    return url.concat(resourceName).concat(query ? `${ query.startsWith('/') ? query : '/' + query }` : '');\r\n  }\r\n\r\n  /**\r\n   * Retrieve a resource name from resource url.\r\n   *\r\n   * @param url resource url\r\n   */\r\n  public static getResourceNameFromUrl(url: string): string {\r\n    ValidationUtils.validateInputParams({url});\r\n\r\n    const dividedBySlashUrl = url.toLowerCase().replace(`${ UrlUtils.getApiUrl().toLowerCase() }/`, '').split('/');\r\n    return dividedBySlashUrl[0];\r\n  }\r\n\r\n  /**\r\n   * Clear url from template params.\r\n   *\r\n   * @param url to be cleaned\r\n   * @throws error when required params are not valid\r\n   */\r\n  public static removeTemplateParams(url: string): string {\r\n    ValidationUtils.validateInputParams({url});\r\n\r\n    return UrlUtils.fillTemplateParams(url, {});\r\n  }\r\n\r\n  /**\r\n   * Clear all url params.\r\n   *\r\n   * @param url to clear params\r\n   * @throws error when required params are not valid\r\n   */\r\n  public static clearUrlParams(url: string): string {\r\n    ValidationUtils.validateInputParams({url});\r\n    const srcUrl = new URL(url);\r\n\r\n    return srcUrl.origin + srcUrl.pathname;\r\n  }\r\n\r\n  /**\r\n   * Fill url template params.\r\n   *\r\n   * @param url to be filled\r\n   * @param options contains params to apply to result url, if empty then template params will be cleared\r\n   * @throws error when required params are not valid\r\n   */\r\n  public static fillTemplateParams(url: string, options: PagedGetOption): string {\r\n    ValidationUtils.validateInputParams({url});\r\n    UrlUtils.checkDuplicateParams(options);\r\n\r\n    const paramsWithoutSortParam = {\r\n      ...options,\r\n      ...options?.params,\r\n      ...options?.pageParams,\r\n      /* Sets sort to null because sort is object and should be applied as multi params with sort name\r\n         for each sort object property, but uriTemplates can't do that and we need to do it manually */\r\n      sort: null\r\n    };\r\n\r\n    const resultUrl = new UriTemplate(url).fill(isNil(paramsWithoutSortParam) ? {} : paramsWithoutSortParam);\r\n    if (options?.sort) {\r\n      const sortParams = UrlUtils.generateSortParams(options.sort);\r\n      if (sortParams.keys().length > 0) {\r\n        return resultUrl.concat(resultUrl.includes('?') ? '&' : '').concat(sortParams.toString());\r\n      }\r\n    }\r\n\r\n    return resultUrl;\r\n  }\r\n\r\n  public static fillDefaultPageDataIfNoPresent(options: PagedGetOption) {\r\n    const pagedOptions = !isEmpty(options) ? options : {};\r\n    if (isEmpty(pagedOptions.pageParams)) {\r\n      pagedOptions.pageParams = LibConfig.config.pagination.defaultPage;\r\n    } else if (!pagedOptions.pageParams.size) {\r\n      pagedOptions.pageParams.size = LibConfig.config.pagination.defaultPage.size;\r\n    } else if (!pagedOptions.pageParams.page) {\r\n      pagedOptions.pageParams.page = LibConfig.config.pagination.defaultPage.page;\r\n    }\r\n\r\n    return pagedOptions;\r\n  }\r\n\r\n  private static generateSortParams(sort: Sort, httpParams?: HttpParams): HttpParams {\r\n    let resultParams = httpParams ? httpParams : new HttpParams();\r\n    if (!isEmpty(sort)) {\r\n      for (const [sortPath, sortOrder] of Object.entries(sort)) {\r\n        resultParams = resultParams.append('sort', `${ sortPath },${ sortOrder }`);\r\n      }\r\n    }\r\n\r\n    return resultParams;\r\n  }\r\n\r\n  private static checkDuplicateParams(options: GetOption): void {\r\n    if (isEmpty(options) || isEmpty(options.params)) {\r\n      return;\r\n    }\r\n    if ('page' in options.params || 'size' in options.params) {\r\n      throw Error('Please, pass page params in page object key, not with params object!');\r\n    }\r\n  }\r\n\r\n}\r\n","import { BaseResource } from '../model/resource/base-resource';\r\nimport { isEmbeddedResource, isResource } from '../model/resource-type';\r\nimport { ResourceCollection } from '../model/resource/resource-collection';\r\nimport { PagedResourceCollection } from '../model/resource/paged-resource-collection';\r\nimport { GetOption, Include, Link, PageData, RequestBody } from '../model/declarations';\r\nimport { Resource } from '../model/resource/resource';\r\nimport { EmbeddedResource } from '../model/resource/embedded-resource';\r\nimport { UrlUtils } from './url.utils';\r\nimport { Stage } from '../logger/stage.enum';\r\nimport { StageLogger } from '../logger/stage-logger';\r\nimport { isArray, isEmpty, isNil, isObject, isPlainObject } from 'lodash-es';\r\nimport { ConsoleLogger } from '../logger/console-logger';\r\n\r\n/* tslint:disable:no-string-literal */\r\nexport class ResourceUtils {\r\n\r\n  public static RESOURCE_NAME_TYPE_MAP: Map<string, any> = new Map<string, any>();\r\n  public static RESOURCE_NAME_PROJECTION_TYPE_MAP: Map<string, any> = new Map<string, any>();\r\n  public static RESOURCE_PROJECTION_REL_NAME_TYPE_MAP: Map<string, any> = new Map<string, any>();\r\n  public static EMBEDDED_RESOURCE_TYPE_MAP: Map<string, any> = new Map<string, any>();\r\n\r\n  private static resourceType: new() => BaseResource;\r\n\r\n  private static resourceCollectionType: new() => ResourceCollection<BaseResource>;\r\n\r\n  private static pagedResourceCollectionType: new(collection: ResourceCollection<BaseResource>, pageData?: PageData)\r\n    => PagedResourceCollection<BaseResource>;\r\n\r\n  private static embeddedResourceType: new() => EmbeddedResource;\r\n\r\n  public static useResourceType(type: new () => Resource) {\r\n    this.resourceType = type;\r\n  }\r\n\r\n  public static useResourceCollectionType(type: new() => ResourceCollection<BaseResource>) {\r\n    this.resourceCollectionType = type;\r\n  }\r\n\r\n  public static usePagedResourceCollectionType(type: new(collection: ResourceCollection<BaseResource>)\r\n    => PagedResourceCollection<BaseResource>) {\r\n    this.pagedResourceCollectionType = type;\r\n  }\r\n\r\n  public static useEmbeddedResourceType(type: new() => EmbeddedResource) {\r\n    this.embeddedResourceType = type;\r\n  }\r\n\r\n  public static instantiateResource<T extends BaseResource>(payload: object, isProjection?: boolean): T {\r\n    // @ts-ignore\r\n    if (isEmpty(payload)\r\n      || (!isObject(payload['_links']) || isEmpty(payload['_links']))) {\r\n      ConsoleLogger.warn('Incorrect resource object! Returned \\'null\\' value, because it has not \\'_links\\' array. Check that server send right resource object.', {incorrectResource: payload});\r\n      return null;\r\n    }\r\n\r\n    return this.createResource(this.resolvePayloadProperties(payload, isProjection), isProjection);\r\n  }\r\n\r\n  private static resolvePayloadProperties<T extends BaseResource>(payload: object, isProjection?: boolean): object {\r\n    for (const key of Object.keys(payload)) {\r\n      if (key === 'hibernateLazyInitializer') {\r\n        delete payload[key];\r\n        continue;\r\n      }\r\n      if (key === '_links') {\r\n        payload[key] = payload[key];\r\n        continue;\r\n      }\r\n      payload[key] = this.resolvePayloadType(key, payload[key], isProjection);\r\n    }\r\n\r\n    return payload;\r\n  }\r\n\r\n  private static resolvePayloadType<T extends BaseResource>(key: string, payload: object, isProjection?: boolean): object {\r\n    if (isNil(payload)) {\r\n      return payload;\r\n    } else if (isArray(payload)) {\r\n      for (let i = 0; i < payload.length; i++) {\r\n        payload[i] = this.resolvePayloadType(key, payload[i], isProjection);\r\n      }\r\n    } else if (isProjection && isPlainObject(payload)) {\r\n      // Need to check resource projection relation props because some inner props can be objects that can be also resources\r\n      payload = this.resolvePayloadProperties(this.createResourceProjectionRel(key, payload), isProjection);\r\n    } else if (isEmbeddedResource(payload) || ResourceUtils.EMBEDDED_RESOURCE_TYPE_MAP.get(key)) {\r\n      // Need to check embedded resource props because some inner props can be objects that can be also resources\r\n      payload = this.resolvePayloadProperties(this.createEmbeddedResource(key, payload), isProjection);\r\n    } else if (isResource(payload)) {\r\n      // Need to check resource props because some inner props can be objects that can be also resources\r\n      payload = this.resolvePayloadProperties(this.createResource(payload), isProjection);\r\n    }\r\n\r\n    return payload;\r\n  }\r\n\r\n  private static createResource<T extends BaseResource>(payload: any, isProjection?: boolean): T {\r\n    const resourceName = this.findResourceName(payload);\r\n    let resourceClass;\r\n    if (isProjection && !ResourceUtils.RESOURCE_NAME_PROJECTION_TYPE_MAP.get(resourceName)) {\r\n      resourceClass = ResourceUtils.RESOURCE_NAME_TYPE_MAP.get(resourceName);\r\n      ConsoleLogger.prettyWarn('Not found projection resource type when create resource projection: \\'' + resourceName + '\\' so used resource type: \\'' + (resourceClass ? resourceClass?.name : ' default Resource') + '\\'. \\n\\r' +\r\n        'It can be when you pass projection param as http request directly instead use projection type with @HateoasProjection.\\n\\r' +\r\n        '\\n\\rSee more how to use @HateoasProjection here https://github.com/lagoshny/ngx-hateoas-client#resource-projection-support.');\r\n    } else {\r\n      resourceClass = isProjection\r\n        ? ResourceUtils.RESOURCE_NAME_PROJECTION_TYPE_MAP.get(resourceName)\r\n        : ResourceUtils.RESOURCE_NAME_TYPE_MAP.get(resourceName);\r\n    }\r\n\r\n    if (resourceClass) {\r\n      return Object.assign(new (resourceClass)() as T, payload);\r\n    } else {\r\n      ConsoleLogger.prettyWarn('Not found resource type when create resource: \\'' + resourceName + '\\' so used default Resource type, for this can be some reasons: \\n\\r' +\r\n        '1) You did not pass resource property name as \\'' + resourceName + '\\' with @HateoasResource decorator. \\n\\r' +\r\n        '2) You did not declare resource type in configuration \"configuration.useTypes.resources\". \\n\\r' +\r\n        '\\n\\rSee more about declare resource types here: https://github.com/lagoshny/ngx-hateoas-client#usetypes-params..');\r\n\r\n      return Object.assign(new this.resourceType(), payload);\r\n    }\r\n  }\r\n\r\n  private static createResourceProjectionRel<T extends Resource>(relationName: string, payload: any): T {\r\n    const relationClass = ResourceUtils.RESOURCE_PROJECTION_REL_NAME_TYPE_MAP.get(relationName);\r\n    if (relationClass) {\r\n      return Object.assign(new (relationClass)() as T, payload);\r\n    } else {\r\n      ConsoleLogger.prettyWarn('Not found resource relation type when create relation: \\'' + relationName + '\\' so used default Resource type, for this can be some reasons: \\n\\r' +\r\n        'You did not pass relation type property with @ProjectionRel decorator on relation property \\'' + relationName + '\\'. \\n\\r' +\r\n        '\\n\\rSee more how to use @ProjectionRel here https://github.com/lagoshny/ngx-hateoas-client#resource-projection-support.');\r\n\r\n      return Object.assign(new this.resourceType(), payload);\r\n    }\r\n  }\r\n\r\n  private static createEmbeddedResource<T extends BaseResource>(key: string, payload: any): T {\r\n    const resourceClass = ResourceUtils.EMBEDDED_RESOURCE_TYPE_MAP.get(key);\r\n    if (resourceClass) {\r\n      return Object.assign(new (resourceClass)() as T, payload);\r\n    } else {\r\n      ConsoleLogger.prettyWarn('Not found embedded resource type when create resource: \\'' + key + '\\' so used default EmbeddedResource type, for this can be some reasons:. \\n\\r' +\r\n        '1) You did not pass embedded resource property name as \\'' + key + '\\' with @HateoasEmbeddedResource decorator. \\n\\r' +\r\n        '2) You did not declare embedded resource type in configuration \"configuration.useTypes.embeddedResources\". \\n\\r' +\r\n        '\\n\\r See more about declare resource types here: https://github.com/lagoshny/ngx-hateoas-client#usetypes-params.');\r\n\r\n      return Object.assign(new this.embeddedResourceType(), payload);\r\n    }\r\n  }\r\n\r\n  public static instantiateResourceCollection<T extends ResourceCollection<BaseResource>>(payload: object, isProjection?: boolean): T {\r\n    if (isEmpty(payload)\r\n      || (!isObject(payload['_links']) || isEmpty(payload['_links']))\r\n      || (!isObject(payload['_embedded']) || isEmpty(payload['_embedded']))) {\r\n      return null;\r\n    }\r\n    const result = new this.resourceCollectionType() as T;\r\n    for (const resourceName of Object.keys(payload['_embedded'])) {\r\n      payload['_embedded'][resourceName].forEach((resource) => {\r\n        result.resources.push(this.instantiateResource(resource, isProjection));\r\n      });\r\n    }\r\n    result['_links'] = {...payload['_links']};\r\n\r\n    return result;\r\n  }\r\n\r\n  public static instantiatePagedResourceCollection<T extends PagedResourceCollection<BaseResource>>(payload: object,\r\n                                                                                                    isProjection?: boolean): T {\r\n    const resourceCollection = this.instantiateResourceCollection(payload, isProjection);\r\n    if (resourceCollection == null) {\r\n      return null;\r\n    }\r\n\r\n    let result;\r\n    if (payload['page']) {\r\n      result = new this.pagedResourceCollectionType(resourceCollection, payload as PageData);\r\n    } else {\r\n      result = new this.pagedResourceCollectionType(resourceCollection);\r\n    }\r\n    return result as T;\r\n  }\r\n\r\n  /**\r\n   * Resolve request body relations.\r\n   * If request body has {@link Resource} value then this value will be replaced by resource self link.\r\n   * If request body has {@link ValuesOption} it will be applied to body values.\r\n   *\r\n   * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}\r\n   */\r\n  public static resolveValues(requestBody: RequestBody<any>): any {\r\n    if (isEmpty(requestBody) || isNil(requestBody.body)\r\n      || (isObject(requestBody.body) && isEmpty(requestBody.body))) {\r\n      StageLogger.stageLog(Stage.RESOLVE_VALUES, {result: 'body is empty return null'});\r\n      return null;\r\n    }\r\n    const body = requestBody.body;\r\n    if (!isObject(body) || isArray(body)) {\r\n      StageLogger.stageLog(Stage.RESOLVE_VALUES, {result: 'body is not object or array return as is'});\r\n      return body;\r\n    }\r\n\r\n    const result: object = {};\r\n    for (const key in body) {\r\n      if (!body.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n      if (body[key] == null && Include.NULL_VALUES === requestBody?.valuesOption?.include) {\r\n        result[key] = null;\r\n        continue;\r\n      }\r\n      if (isNil(body[key])) {\r\n        continue;\r\n      }\r\n      if (isArray(body[key])) {\r\n        const array: any[] = body[key];\r\n        result[key] = [];\r\n        array.forEach((element) => {\r\n          if (isResource(element)) {\r\n            result[key].push(element?._links?.self?.href);\r\n          } else {\r\n            result[key].push(this.resolveValues({body: element, valuesOption: requestBody?.valuesOption}));\r\n          }\r\n        });\r\n      } else if (isResource(body[key])) {\r\n        result[key] = body[key]._links?.self?.href;\r\n      } else if (isPlainObject(body[key])) {\r\n        result[key] = this.resolveValues({body: body[key], valuesOption: requestBody?.valuesOption});\r\n      } else {\r\n        result[key] = body[key];\r\n      }\r\n    }\r\n    StageLogger.stageLog(Stage.RESOLVE_VALUES, {result});\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Assign {@link Resource} or {@link EmbeddedResource} properties to passed entity.\r\n   *\r\n   * @param entity to be converter to resource\r\n   */\r\n  public static initResource(entity: any): BaseResource | any {\r\n    if (isResource(entity)) {\r\n      return Object.assign(new this.resourceType(), entity);\r\n    } else if (isEmbeddedResource(entity)) {\r\n      return Object.assign(new this.embeddedResourceType(), entity);\r\n    } else {\r\n      return entity;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define resource name based on resource links.\r\n   * It will get link name that href equals to self href resource link.\r\n   *\r\n   * @param payload that can be a resource for which to find the name\r\n   */\r\n  private static findResourceName(payload: object): string {\r\n    if (!payload || !payload['_links'] || !payload['_links'].self) {\r\n      return '';\r\n    }\r\n    const resourceLinks = payload['_links'] as Link;\r\n    if (isEmpty(resourceLinks) || isEmpty(resourceLinks.self) || isNil(resourceLinks.self.href)) {\r\n      return '';\r\n    }\r\n\r\n    return UrlUtils.getResourceNameFromUrl(UrlUtils.removeTemplateParams(resourceLinks.self.href));\r\n  }\r\n\r\n  /**\r\n   * Checks is a resource projection or not.\r\n   *\r\n   * @param payload object that can be resource or resource projection\r\n   */\r\n  private static isResourceProjection(payload: object): boolean {\r\n    if (!payload || !payload['_links'] || !payload['_links'].self) {\r\n      return false;\r\n    }\r\n\r\n    const selfLink = payload['_links'].self;\r\n    const resourceLinks = payload['_links'];\r\n    for (const key of Object.keys(resourceLinks)) {\r\n      if (key !== 'self' && resourceLinks[key].href.includes(selfLink.href)) {\r\n        return new URL(resourceLinks[key].href).search.includes('projection');\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Try to get projectionName from resource type and set it to options. If resourceType has not projectionName then return options as is.\r\n   *\r\n   * @param resourceType from get projectionName\r\n   * @param options to set projectionName\r\n   */\r\n  public static fillProjectionNameFromResourceType<T extends Resource>(resourceType: new () => T, options?: GetOption) {\r\n    if (!resourceType) {\r\n      return;\r\n    }\r\n    const projectionName = resourceType['__projectionName__'];\r\n    if (projectionName) {\r\n      options = options ? options : {params: {}};\r\n      options = {\r\n        ...options,\r\n        params: {\r\n          ...options.params,\r\n          projection: projectionName\r\n        }\r\n      };\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\n/**\r\n * Contains all needed information about a resource.\r\n * It generates a string cache key to hold in a cache map from information about a resource.\r\n */\r\nexport class CacheKey {\r\n\r\n  /**\r\n   * String cache key value.\r\n   */\r\n  public value: string;\r\n\r\n  private constructor(public readonly url: string, private readonly options: {\r\n    observe?: 'body' | 'response';\r\n    params?: HttpParams\r\n  }) {\r\n    this.value = `url=${ this.url }`;\r\n    if (options) {\r\n      if (options.params && options.params.keys().length > 0) {\r\n        this.value += `${ this.value.includes('?') ? '&' : '?' }${ this.options?.params?.toString() }`;\r\n      }\r\n      if (options.observe) {\r\n        this.value += `&observe=${ this.options?.observe }`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create cache key from resource url and request params.\r\n   *\r\n   * @param url resource url\r\n   * @param params request params\r\n   */\r\n  public static of(url: string, params: {\r\n    observe?: 'body' | 'response';\r\n    params?: HttpParams\r\n  }): CacheKey {\r\n    return new CacheKey(url, params);\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Observable, of as observableOf } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StageLogger } from '../logger/stage-logger';\r\nimport { Stage } from '../logger/stage.enum';\r\nimport { ValidationUtils } from '../util/validation.utils';\r\nimport { CacheKey } from './internal/cache/model/cache-key';\r\nimport { isResourceObject } from '../model/resource-type';\r\nimport { ResourceCacheService } from './internal/cache/resource-cache.service';\r\nimport { LibConfig } from '../config/lib-config';\r\nimport { HttpClientOptions } from '../model/declarations';\r\n\r\n/**\r\n * Base class with common logics to perform HTTP requests.\r\n */\r\n\r\n/* tslint:disable:no-string-literal */\r\nexport class HttpExecutor {\r\n\r\n  constructor(protected httpClient: HttpClient,\r\n              protected cacheService: ResourceCacheService) {\r\n  }\r\n\r\n  private static logRequest(method: string,\r\n                            url: string,\r\n                            options: HttpClientOptions,\r\n                            body?: any) {\r\n    const params = {\r\n      method,\r\n      url,\r\n      options: {\r\n        ...options,\r\n        params: options?.params?.keys().length > 0 ? options?.params.toString() : '',\r\n      }\r\n    };\r\n    if (body) {\r\n      params['body'] = body;\r\n    }\r\n    StageLogger.stageLog(Stage.HTTP_REQUEST, params);\r\n  }\r\n\r\n  private static logResponse(method: string,\r\n                             url: string,\r\n                             options: HttpClientOptions,\r\n                             data: any) {\r\n    StageLogger.stageLog(Stage.HTTP_RESPONSE, {\r\n      method,\r\n      url,\r\n      options: {\r\n        ...options,\r\n        params: options?.params?.keys().length > 0 ? options?.params.toString() : '',\r\n      },\r\n      result: data\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform GET request.\r\n   *\r\n   * @param url to perform request\r\n   * @param options (optional) options that applied to the request\r\n   * @param useCache value {@code true} if need to use cache, {@code false} otherwise\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getHttp(url: string,\r\n                 options?: HttpClientOptions,\r\n                 useCache: boolean = true): Observable<any> {\r\n    ValidationUtils.validateInputParams({url});\r\n    if (LibConfig.config.cache.enabled && useCache) {\r\n      const cachedValue = this.cacheService.getResource(CacheKey.of(url, options));\r\n      if (cachedValue != null) {\r\n        return observableOf(cachedValue);\r\n      }\r\n    }\r\n    HttpExecutor.logRequest('GET', url, options);\r\n\r\n    let response;\r\n    if (options?.observe === 'response') {\r\n      response = this.httpClient.get(url, {...options, observe: 'response'});\r\n    } else {\r\n      response = this.httpClient.get(url, {...options, observe: 'body'});\r\n    }\r\n\r\n    return response.pipe(\r\n      tap((data: any) => {\r\n        HttpExecutor.logResponse('GET', url, options, data);\r\n        if (LibConfig.config.cache.enabled && useCache && isResourceObject(data)) {\r\n          this.cacheService.putResource(CacheKey.of(url, options), data);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Perform POST request.\r\n   *\r\n   * @param url to perform request\r\n   * @param body to send with request\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public postHttp(url: string, body: any | null, options?: HttpClientOptions): Observable<any> {\r\n    HttpExecutor.logRequest('POST', url, options, body);\r\n    ValidationUtils.validateInputParams({url});\r\n\r\n    let response;\r\n    if (options?.observe === 'response') {\r\n      response = this.httpClient.post(url, body, {...options, observe: 'response'});\r\n    } else {\r\n      response = this.httpClient.post(url, body, {...options, observe: 'body'});\r\n    }\r\n\r\n    return response.pipe(\r\n      tap((data) => {\r\n        HttpExecutor.logResponse('POST', url, options, data);\r\n        if (LibConfig.config.cache.enabled) {\r\n          this.cacheService.evictResource(CacheKey.of(url, options));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Perform PUT request.\r\n   *\r\n   * @param url to perform request\r\n   * @param body to send with request\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public putHttp(url: string, body: any | null, options?: HttpClientOptions): Observable<any> {\r\n    HttpExecutor.logRequest('PUT', url, options, body);\r\n    ValidationUtils.validateInputParams({url});\r\n\r\n    let response;\r\n    if (options?.observe === 'response') {\r\n      response = this.httpClient.put(url, body, {...options, observe: 'response'});\r\n    } else {\r\n      response = this.httpClient.put(url, body, {...options, observe: 'body'});\r\n    }\r\n\r\n    return response.pipe(\r\n      tap((data) => {\r\n        HttpExecutor.logResponse('PUT', url, options, data);\r\n        if (LibConfig.config.cache.enabled) {\r\n          this.cacheService.evictResource(CacheKey.of(url, options));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Perform PATCH request.\r\n   *\r\n   * @param url to perform request\r\n   * @param body to send with request\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public patchHttp(url: string, body: any | null, options?: HttpClientOptions): Observable<any> {\r\n    HttpExecutor.logRequest('PATCH', url, options, body);\r\n    ValidationUtils.validateInputParams({url});\r\n\r\n    let response;\r\n    if (options?.observe === 'response') {\r\n      response = this.httpClient.patch(url, body, {...options, observe: 'response'});\r\n    } else {\r\n      response = this.httpClient.patch(url, body, {...options, observe: 'body'});\r\n    }\r\n\r\n    return response.pipe(\r\n      tap((data) => {\r\n        HttpExecutor.logResponse('PATCH', url, options, data);\r\n        if (LibConfig.config.cache.enabled) {\r\n          this.cacheService.evictResource(CacheKey.of(url, options));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Perform DELETE request.\r\n   *\r\n   * @param url to perform request\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public deleteHttp(url: string, options?: HttpClientOptions): Observable<any> {\r\n    HttpExecutor.logRequest('DELETE', url, options);\r\n    ValidationUtils.validateInputParams({url});\r\n\r\n    let response;\r\n    if (options?.observe === 'response') {\r\n      response = this.httpClient.delete(url, {...options, observe: 'response'});\r\n    } else {\r\n      response = this.httpClient.delete(url, {...options, observe: 'body'});\r\n    }\r\n\r\n    return response.pipe(\r\n      tap((data) => {\r\n        HttpExecutor.logResponse('DELETE', url, options, data);\r\n        if (LibConfig.config.cache.enabled) {\r\n          this.cacheService.evictResource(CacheKey.of(url, options));\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","/**\r\n * Represents cache resource model that contains resource and time when resource was added to the cache.\r\n */\r\nimport { ResourceIdentifiable } from '../../../../model/declarations';\r\n\r\nexport class CachedResource  {\r\n\r\n  /**\r\n   * Cached resource value.\r\n   * It's can be {@link Resource}, {@link ResourceCollection}, {@link PagedResourceCollection}.\r\n   */\r\n  public value: ResourceIdentifiable;\r\n\r\n  /**\r\n   * Time when value was added to the cache.\r\n   */\r\n  public cachedTime: Date;\r\n\r\n  constructor(value: any, cachedTime: Date) {\r\n    this.value = value;\r\n    this.cachedTime = cachedTime;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CachedResource } from './model/cached-resource';\r\nimport { StageLogger } from '../../../logger/stage-logger';\r\nimport { Stage } from '../../../logger/stage.enum';\r\nimport { CacheKey } from './model/cache-key';\r\nimport { ValidationUtils } from '../../../util/validation.utils';\r\nimport { ResourceIdentifiable } from '../../../model/declarations';\r\nimport { LibConfig } from '../../../config/lib-config';\r\nimport { UrlUtils } from '../../../util/url.utils';\r\nimport { isNil } from 'lodash-es';\r\n\r\n@Injectable()\r\nexport class ResourceCacheService {\r\n\r\n  private cacheMap: Map<string, CachedResource> = new Map<string, CachedResource>();\r\n\r\n  /**\r\n   * Get cached resource value.\r\n   *\r\n   * @param key cache key\r\n   * @return cached value or {@code null} when cached value is not exist or expired\r\n   */\r\n  public getResource(key: CacheKey): ResourceIdentifiable {\r\n    ValidationUtils.validateInputParams({key});\r\n\r\n    const cacheValue = this.cacheMap.get(key.value);\r\n    if (isNil(cacheValue)) {\r\n      StageLogger.stageLog(Stage.CACHE_GET, {cacheKey: key.value, result: null});\r\n      return null;\r\n    }\r\n\r\n    const cacheExpiredTime = new Date(cacheValue.cachedTime);\r\n    cacheExpiredTime.setMilliseconds(cacheExpiredTime.getMilliseconds() + LibConfig.config.cache.lifeTime);\r\n    if (cacheExpiredTime.getTime() < new Date().getTime()) {\r\n      this.evictResource(key);\r\n      StageLogger.stageLog(Stage.CACHE_GET, {cacheKey: key.value, message: 'cache was expired', result: null});\r\n      return null;\r\n    }\r\n\r\n    StageLogger.stageLog(Stage.CACHE_GET, {cacheKey: key.value, result: cacheValue.value});\r\n    return cacheValue.value;\r\n  }\r\n\r\n  /**\r\n   * Add resource value to the cache.\r\n   * Before add new value, previous will be deleted if it was exist.\r\n   *\r\n   * @param key cache key\r\n   * @param value cache value\r\n   */\r\n  public putResource(key: CacheKey, value: ResourceIdentifiable): void {\r\n    ValidationUtils.validateInputParams({key, value});\r\n\r\n    this.cacheMap.set(key.value, new CachedResource(value, new Date()));\r\n\r\n    StageLogger.stageLog(Stage.CACHE_PUT, {cacheKey: key.value, value});\r\n  }\r\n\r\n  /**\r\n   * Delete cached resource value by passed key.\r\n   *\r\n   * @param key cache key\r\n   */\r\n  public evictResource(key: CacheKey): void {\r\n    ValidationUtils.validateInputParams({key});\r\n\r\n    // Get resource name by url to evict all resource cache with collection/paged collection data\r\n    const resourceName = key.url.replace(`${ UrlUtils.getApiUrl() }/`, '').split('/')[0];\r\n    if (!resourceName) {\r\n      return;\r\n    }\r\n    const evictedCache = [];\r\n    for (const cacheKey of this.cacheMap.keys()) {\r\n      if (cacheKey.startsWith(`url=${ UrlUtils.getApiUrl() }/${ resourceName }`)) {\r\n        evictedCache.push({\r\n          key: cacheKey\r\n        });\r\n        this.cacheMap.delete(cacheKey);\r\n      }\r\n    }\r\n    if (evictedCache.length > 0) {\r\n      StageLogger.stageLog(Stage.CACHE_EVICT, {cacheKey: key.value, evicted: evictedCache});\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError as observableThrowError } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { BaseResource } from '../../model/resource/base-resource';\r\nimport { DependencyInjector } from '../../util/dependency-injector';\r\nimport { UrlUtils } from '../../util/url.utils';\r\nimport { getResourceType, isResource } from '../../model/resource-type';\r\nimport { GetOption, RequestOption } from '../../model/declarations';\r\nimport { HttpExecutor } from '../http-executor';\r\nimport { LibConfig } from '../../config/lib-config';\r\nimport { Stage } from '../../logger/stage.enum';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { toString } from 'lodash-es';\r\nimport { CacheKey } from './cache/model/cache-key';\r\nimport { ResourceCacheService } from './cache/resource-cache.service';\r\n\r\n/**\r\n * Get instance of the ResourceHttpService by Angular DependencyInjector.\r\n */\r\nexport function getResourceHttpService(): ResourceHttpService {\r\n  return DependencyInjector.get(ResourceHttpService);\r\n}\r\n\r\n/**\r\n * Service to perform HTTP requests to get {@link Resource} type.\r\n */\r\n@Injectable()\r\nexport class ResourceHttpService extends HttpExecutor {\r\n\r\n  constructor(httpClient: HttpClient,\r\n              cacheService: ResourceCacheService) {\r\n    super(httpClient, cacheService);\r\n  }\r\n\r\n  /**\r\n   * Perform GET request to retrieve resource.\r\n   *\r\n   * @param url to perform request\r\n   * @param options request options\r\n   * @throws error when required params are not valid or returned resource type is not resource\r\n   */\r\n  public get<T extends BaseResource>(url: string,\r\n                                     options?: GetOption): Observable<T> {\r\n    const httpOptions = UrlUtils.convertToHttpOptions(options);\r\n    return super.getHttp(url, httpOptions, options?.useCache)\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (!isResource(data)) {\r\n            if (LibConfig.config.cache.enabled) {\r\n              this.cacheService.evictResource(CacheKey.of(url, httpOptions));\r\n            }\r\n            const errMsg = `You try to get wrong resource type: expected Resource type, actual ${ getResourceType(data) } type.`;\r\n            StageLogger.stageErrorLog(Stage.INIT_RESOURCE, {\r\n              options,\r\n              error: errMsg\r\n            });\r\n            throw new Error(errMsg);\r\n          }\r\n\r\n          return ResourceUtils.instantiateResource(data, httpOptions?.params?.has('projection')) as T;\r\n        }),\r\n        catchError(error => observableThrowError(error)));\r\n  }\r\n\r\n  /**\r\n   * Perform POST request.\r\n   *\r\n   * @param url to perform request\r\n   * @param body request body\r\n   * @param options request options\r\n   * @throws error when required params are not valid\r\n   */\r\n  public post(url: string, body: any | null, options?: RequestOption): Observable<any> {\r\n    return super.postHttp(url, body, UrlUtils.convertToHttpOptions(options))\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (isResource(data)) {\r\n            return ResourceUtils.instantiateResource(data);\r\n          }\r\n          return data;\r\n        }),\r\n        catchError(error => observableThrowError(error))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Perform PUT request.\r\n   *\r\n   * @param url to perform request\r\n   * @param body request body\r\n   * @param options request options\r\n   * @throws error when required params are not valid\r\n   */\r\n  public put(url: string, body: any | null, options?: RequestOption): Observable<any> {\r\n    return super.putHttp(url, body, UrlUtils.convertToHttpOptions(options))\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (isResource(data)) {\r\n            return ResourceUtils.instantiateResource(data);\r\n          }\r\n          return data;\r\n        }),\r\n        catchError(error => observableThrowError(error))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Perform PATCH request.\r\n   *\r\n   * @param url to perform request\r\n   * @param body request body\r\n   * @param options request options\r\n   * @throws error when required params are not valid\r\n   */\r\n  public patch(url: string, body: any | null, options?: RequestOption): Observable<any> {\r\n    return super.patchHttp(url, body, UrlUtils.convertToHttpOptions(options))\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (isResource(data)) {\r\n            return ResourceUtils.instantiateResource(data);\r\n          }\r\n\r\n          return data;\r\n        }),\r\n        catchError(error => observableThrowError(error))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Perform DELETE request.\r\n   *\r\n   * @param url to perform request\r\n   * @param options request options\r\n   * @throws error when required params are not valid\r\n   */\r\n  public delete(url: string, options?: RequestOption): Observable<any> {\r\n    return super.deleteHttp(url, {\r\n      ...UrlUtils.convertToHttpOptions(options),\r\n      observe: options?.observe ? options?.observe : 'response'\r\n    })\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (isResource(data)) {\r\n            return ResourceUtils.instantiateResource(data);\r\n          }\r\n          return data;\r\n        }),\r\n        catchError(error => observableThrowError(error))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Perform get resource request with url built by the resource name.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param id resource id\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getResource<T extends BaseResource>(resourceName: string,\r\n                                             id: number | string,\r\n                                             options?: GetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceName, id});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName).concat('/', toString(id));\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', id: '${ id }'`,\r\n      options\r\n    });\r\n\r\n    return this.get(url, options);\r\n  }\r\n\r\n  /**\r\n   * Perform POST resource request with url built by the resource name.\r\n   *\r\n   * @param resourceName to be post\r\n   * @param body resource to create\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public postResource(resourceName: string,\r\n                      body: BaseResource,\r\n                      options?: RequestOption): Observable<any> {\r\n    ValidationUtils.validateInputParams({resourceName, body});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName);\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }'`,\r\n      options\r\n    });\r\n\r\n    return this.post(url, body, options);\r\n  }\r\n\r\n  /**\r\n   * Perform PATCH resource request with url built by the resource name and resource id.\r\n   *\r\n   * @param resourceName to be patched\r\n   * @param id resource id\r\n   * @param body contains data to patch resource properties\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public patchResource(resourceName: string,\r\n                       id: number | string,\r\n                       body: any,\r\n                       options?: RequestOption): Observable<any> {\r\n    ValidationUtils.validateInputParams({resourceName, id, body});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName, toString(id));\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', resourceId: '${ id }'`,\r\n      options\r\n    });\r\n\r\n    return this.patch(url, body, options);\r\n  }\r\n\r\n  /**\r\n   * Perform PUT resource request with url built by the resource name and resource id.\r\n   *\r\n   * @param resourceName to be put\r\n   * @param id resource id\r\n   * @param body contains data to replace resource properties\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public putResource(resourceName: string,\r\n                     id: number | string,\r\n                     body: any,\r\n                     options?: RequestOption): Observable<any> {\r\n    ValidationUtils.validateInputParams({resourceName, id, body});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName, toString(id));\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', resourceId: '${ id }'`,\r\n      options\r\n    });\r\n\r\n    return this.put(url, body, options);\r\n  }\r\n\r\n  /**\r\n   * Perform DELETE resource request with url built by the resource name and resource id.\r\n   *\r\n   * @param resourceName to be deleted\r\n   * @param id resource id\r\n   * @param options (optional) additional options that will be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public deleteResource(resourceName: string,\r\n                        id: number | string,\r\n                        options?: RequestOption): Observable<any> {\r\n    ValidationUtils.validateInputParams({resourceName, id});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName, toString(id));\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', resourceId: '${ id }'`,\r\n      options\r\n    });\r\n\r\n    return this.delete(url, options);\r\n  }\r\n\r\n  /**\r\n   * Perform search single resource request with url built by the resource name.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param searchQuery name of the search method\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public search<T extends BaseResource>(resourceName: string,\r\n                                        searchQuery: string,\r\n                                        options?: GetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceName, searchQuery});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName).concat('/search/' + searchQuery);\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', searchQuery: '${ searchQuery }'`,\r\n      options\r\n    });\r\n\r\n    return this.get(url, options);\r\n  }\r\n\r\n}\r\n","import { Link, LinkData } from '../declarations';\r\nimport { isEmpty } from 'lodash-es';\r\n\r\n/**\r\n * Abstract impl identifies resource interface.\r\n */\r\nexport abstract class AbstractResource {\r\n\r\n  /**\r\n   * List of links related with the resource.\r\n   */\r\n    // tslint:disable-next-line:variable-name\r\n  protected _links: Link;\r\n\r\n  /**\r\n   * Get relation link by relation name.\r\n   *\r\n   * @param relationName used to get the specific resource relation link\r\n   * @throws error if no link is found by passed relation name\r\n   */\r\n  public getRelationLink(relationName: string): LinkData {\r\n    if (isEmpty(this._links)) {\r\n      throw new Error(`Resource '${ this.constructor.name }' relation links are empty, can not to get relation with the name '${ relationName }'.`);\r\n    }\r\n\r\n    const relationLink = this._links[relationName];\r\n    if (isEmpty(relationLink) || isEmpty(relationLink.href)) {\r\n      throw new Error(`Resource '${ this.constructor.name }' has not relation link with the name '${ relationName }'.`);\r\n    }\r\n\r\n    return relationLink;\r\n  }\r\n\r\n  /**\r\n   * Checks if relation link is present.\r\n   *\r\n   * @param relationName used to check for the specified relation name\r\n   * @returns true if link is present, false otherwise\r\n   */\r\n  public hasRelation(relationName: string): boolean {\r\n    if (isEmpty(this._links)) {\r\n      return false;\r\n    } else {\r\n      return !isEmpty(this._links[relationName]);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LibConfig } from '../../config/lib-config';\r\nimport { Observable, throwError as observableThrowError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { getResourceType, isResourceCollection } from '../../model/resource-type';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { ResourceCollection } from '../../model/resource/resource-collection';\r\nimport { BaseResource } from '../../model/resource/base-resource';\r\nimport { DependencyInjector } from '../../util/dependency-injector';\r\nimport { GetOption } from '../../model/declarations';\r\nimport { UrlUtils } from '../../util/url.utils';\r\nimport { HttpExecutor } from '../http-executor';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { Stage } from '../../logger/stage.enum';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { CacheKey } from './cache/model/cache-key';\r\nimport { ResourceCacheService } from './cache/resource-cache.service';\r\n\r\nexport function getResourceCollectionHttpService(): ResourceCollectionHttpService {\r\n  return DependencyInjector.get(ResourceCollectionHttpService);\r\n}\r\n\r\n/**\r\n * Service to perform HTTP requests to get {@link ResourceCollection} type.\r\n */\r\n@Injectable()\r\nexport class ResourceCollectionHttpService extends HttpExecutor {\r\n\r\n  constructor(httpClient: HttpClient,\r\n              cacheService: ResourceCacheService) {\r\n    super(httpClient, cacheService);\r\n  }\r\n\r\n  /**\r\n   * Perform GET request to retrieve collection of the resources.\r\n   *\r\n   * @param url to perform request\r\n   * @param options request options\r\n   * @throws error when required params are not valid or returned resource type is not collection of the resources\r\n   */\r\n  public get<T extends ResourceCollection<BaseResource>>(url: string,\r\n                                                         options?: GetOption): Observable<T> {\r\n    const httpOptions = UrlUtils.convertToHttpOptions(options);\r\n\r\n    return super.getHttp(url, httpOptions)\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (!isResourceCollection(data)) {\r\n            if (LibConfig.config.cache.enabled) {\r\n              this.cacheService.evictResource(CacheKey.of(url, httpOptions));\r\n            }\r\n            const errMsg = `You try to get the wrong resource type: expected ResourceCollection type, actual ${ getResourceType(data) } type.`;\r\n            StageLogger.stageErrorLog(Stage.INIT_RESOURCE, {error: errMsg, options});\r\n            throw new Error(errMsg);\r\n          }\r\n\r\n          return ResourceUtils.instantiateResourceCollection(data, httpOptions?.params?.has('projection')) as T;\r\n        }),\r\n        catchError(error => observableThrowError(error)));\r\n  }\r\n\r\n  /**\r\n   * Perform get resource collection request with url built by the resource name.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getResourceCollection<T extends ResourceCollection<BaseResource>>(resourceName: string, options?: GetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceName});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName);\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }'`,\r\n      options\r\n    });\r\n\r\n    return this.get(url, options);\r\n  }\r\n\r\n  /**\r\n   *  Perform search resource collection request with url built by the resource name.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param searchQuery name of the search method\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public search<T extends ResourceCollection<BaseResource>>(resourceName: string, searchQuery: string, options?: GetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceName, searchQuery});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName).concat('/search/' + searchQuery);\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', searchQuery: '${ searchQuery }'`,\r\n      options\r\n    });\r\n\r\n    return this.get(url, options);\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseResource } from '../../model/resource/base-resource';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LibConfig } from '../../config/lib-config';\r\nimport { PagedResourceCollection } from '../../model/resource/paged-resource-collection';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { getResourceType, isPagedResourceCollection } from '../../model/resource-type';\r\nimport { Observable, throwError as observableThrowError } from 'rxjs';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { UrlUtils } from '../../util/url.utils';\r\nimport { DependencyInjector } from '../../util/dependency-injector';\r\nimport { PagedGetOption } from '../../model/declarations';\r\nimport { HttpExecutor } from '../http-executor';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { Stage } from '../../logger/stage.enum';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { CacheKey } from './cache/model/cache-key';\r\nimport { ResourceCacheService } from './cache/resource-cache.service';\r\n\r\n/**\r\n * Get instance of the PagedResourceCollectionHttpService by Angular DependencyInjector.\r\n */\r\nexport function getPagedResourceCollectionHttpService(): PagedResourceCollectionHttpService {\r\n  return DependencyInjector.get(PagedResourceCollectionHttpService);\r\n}\r\n\r\n/**\r\n * Service to perform HTTP requests to get {@link PagedResourceCollection} type.\r\n */\r\n@Injectable()\r\nexport class PagedResourceCollectionHttpService extends HttpExecutor {\r\n\r\n  constructor(httpClient: HttpClient,\r\n              cacheService: ResourceCacheService) {\r\n    super(httpClient, cacheService);\r\n  }\r\n\r\n  /**\r\n   * Perform GET request to retrieve paged collection of the resources.\r\n   *\r\n   * @param url to perform request\r\n   * @param options request options\r\n   * @throws error when required params are not valid or returned resource type is not paged collection of the resources\r\n   */\r\n  public get<T extends PagedResourceCollection<BaseResource>>(url: string,\r\n                                                              options?: PagedGetOption): Observable<T> {\r\n    const httpOptions = UrlUtils.convertToHttpOptions(options);\r\n\r\n    return super.getHttp(url, httpOptions, options?.useCache)\r\n      .pipe(\r\n        map((data: any) => {\r\n          if (!isPagedResourceCollection(data)) {\r\n            if (LibConfig.config.cache.enabled) {\r\n              this.cacheService.evictResource(CacheKey.of(url, httpOptions));\r\n            }\r\n            const errMsg = `You try to get wrong resource type: expected PagedResourceCollection type, actual ${ getResourceType(data) } type.`;\r\n            StageLogger.stageErrorLog(Stage.INIT_RESOURCE, {error: errMsg, options});\r\n            throw new Error(errMsg);\r\n          }\r\n\r\n          return ResourceUtils.instantiatePagedResourceCollection(data, httpOptions?.params?.has('projection')) as T;\r\n        }),\r\n        catchError(error => observableThrowError(error)));\r\n  }\r\n\r\n  /**\r\n   * Perform get paged resource collection request with url built by the resource name.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getResourcePage<T extends PagedResourceCollection<BaseResource>>(resourceName: string,\r\n                                                                          options?: PagedGetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceName});\r\n\r\n    const url = UrlUtils.removeTemplateParams(UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName));\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }'`,\r\n      options\r\n    });\r\n\r\n    return this.get(url, UrlUtils.fillDefaultPageDataIfNoPresent(options));\r\n  }\r\n\r\n  /**\r\n   *  Perform search paged resource collection request with url built by the resource name.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param searchQuery name of the search method\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public search<T extends PagedResourceCollection<BaseResource>>(resourceName: string,\r\n                                                                 searchQuery: string,\r\n                                                                 options?: PagedGetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceName, searchQuery});\r\n\r\n    const url = UrlUtils.removeTemplateParams(\r\n      UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName)).concat('/search/' + searchQuery);\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }'`,\r\n      options\r\n    });\r\n\r\n    return this.get(url, UrlUtils.fillDefaultPageDataIfNoPresent(options));\r\n  }\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { getResourceHttpService } from '../../service/internal/resource-http.service';\r\nimport { UrlUtils } from '../../util/url.utils';\r\nimport { AbstractResource } from './abstract-resource';\r\nimport { ResourceCollection } from './resource-collection';\r\nimport { getResourceCollectionHttpService } from '../../service/internal/resource-collection-http.service';\r\nimport { GetOption, PagedGetOption, RequestBody, RequestOption } from '../declarations';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { getPagedResourceCollectionHttpService } from '../../service/internal/paged-resource-collection-http.service';\r\nimport { PagedResourceCollection } from './paged-resource-collection';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { tap } from 'rxjs/operators';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\n\r\n/**\r\n * Common resource class.\r\n */\r\nexport abstract class BaseResource extends AbstractResource {\r\n\r\n  /**\r\n   * Get single resource by the relation name.\r\n   *\r\n   * @param relationName used to get the specific relation link\r\n   * @param options (optional) options that should be applied to the request\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public getRelation<T extends BaseResource>(relationName: string,\r\n                                             options?: GetOption\r\n  ): Observable<T> {\r\n    ValidationUtils.validateInputParams({relationName});\r\n    StageLogger.resourceBeginLog(this, 'GET_RELATION', {relationName, options});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n    const optionsToRequest = relationLink.templated\r\n      ? {...options, params: undefined, sort: undefined}\r\n      : options;\r\n\r\n    return getResourceHttpService()\r\n      .get(UrlUtils.generateLinkUrl(relationLink, options), optionsToRequest)\r\n      .pipe(\r\n        tap(() => {\r\n          StageLogger.resourceEndLog(this, 'GET_RELATION', {result: `relation ${ relationName } was got successful`});\r\n        })\r\n      ) as Observable<T>;\r\n  }\r\n\r\n  /**\r\n   * Get collection of resources by the relation name.\r\n   *\r\n   * @param relationName used to get the specific relation link\r\n   * @param options (optional) options that will be applied to the request\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public getRelatedCollection<T extends ResourceCollection<BaseResource>>(relationName: string,\r\n                                                                          options?: GetOption\r\n  ): Observable<T> {\r\n    ValidationUtils.validateInputParams({relationName});\r\n    StageLogger.resourceBeginLog(this, 'GET_RELATED_COLLECTION', {relationName, options});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n    const optionsToRequest = relationLink.templated\r\n      ? {...options, params: undefined, sort: undefined}\r\n      : options;\r\n\r\n    return getResourceCollectionHttpService()\r\n      .get(UrlUtils.generateLinkUrl(relationLink, options), optionsToRequest)\r\n      .pipe(\r\n        tap(() => {\r\n          StageLogger.resourceEndLog(this, 'GET_RELATED_COLLECTION', {result: `related collection ${ relationName } was got successful`});\r\n        })\r\n      ) as Observable<T>;\r\n  }\r\n\r\n  /**\r\n   * Get paged collection of resources by the relation name.\r\n   *\r\n   * @param relationName used to get the specific relation link\r\n   * @param options (optional) additional options that should be applied to the request\r\n   *        if options didn't contains {@link PageParam} then will be used default page params.\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public getRelatedPage<T extends PagedResourceCollection<BaseResource>>(relationName: string,\r\n                                                                         options?: PagedGetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({relationName});\r\n    StageLogger.resourceBeginLog(this, 'GET_RELATED_PAGE', {relationName, options});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n    const optionsToRequest = relationLink.templated\r\n      ? {...options, params: undefined, pageParams: undefined, sort: undefined}\r\n      : options;\r\n\r\n    return getPagedResourceCollectionHttpService()\r\n      .get(UrlUtils.generateLinkUrl(relationLink, UrlUtils.fillDefaultPageDataIfNoPresent(options)), optionsToRequest)\r\n      .pipe(\r\n        tap(() => {\r\n          StageLogger.resourceEndLog(this, 'GET_RELATED_PAGE', {result: `related page ${ relationName } was got successful`});\r\n        })\r\n      ) as Observable<T>;\r\n  }\r\n\r\n  /**\r\n   *  Perform POST request to the relation with the body and url params.\r\n   *\r\n   * @param relationName used to get the specific relation link\r\n   * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}\r\n   * @param options (optional) request options that will be applied to the request\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public postRelation(relationName: string,\r\n                      requestBody: RequestBody<any>,\r\n                      options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    ValidationUtils.validateInputParams({relationName, requestBody});\r\n    StageLogger.resourceBeginLog(this, 'POST_RELATION', {relationName, requestBody, options});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n\r\n    return getResourceHttpService()\r\n      .post(\r\n        UrlUtils.generateLinkUrl(relationLink, options),\r\n        ResourceUtils.resolveValues(requestBody),\r\n        {\r\n          ...options,\r\n          observe: options?.observe ? options.observe : 'body',\r\n          params: relationLink.templated ? undefined : options?.params\r\n        })\r\n      .pipe(\r\n        tap(() => {\r\n          StageLogger.resourceEndLog(this, 'POST_RELATION', {result: `relation ${ relationName } was posted successful`});\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Perform PATCH request to relation with body and url params.\r\n   *\r\n   * @param relationName used to get the specific relation link\r\n   * @param requestBody contains the body directly and body values option {@link ValuesOption}\r\n   *        to clarify what specific values need to be included or not included in result request body\r\n   * @param options (optional) request options that will be applied to the request\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public patchRelation(relationName: string,\r\n                       requestBody: RequestBody<any>,\r\n                       options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    ValidationUtils.validateInputParams({relationName, requestBody});\r\n    StageLogger.resourceBeginLog(this, 'PATCH_RELATION', {relationName, requestBody, options});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n\r\n    return getResourceHttpService()\r\n      .patch(\r\n        UrlUtils.generateLinkUrl(relationLink, options),\r\n        ResourceUtils.resolveValues(requestBody),\r\n        {\r\n          ...options,\r\n          observe: options?.observe ? options.observe : 'body',\r\n          params: relationLink.templated ? undefined : options?.params\r\n        })\r\n      .pipe(\r\n        tap(() => {\r\n          StageLogger.resourceEndLog(this, 'PATCH_RELATION', {result: `relation ${ relationName } was patched successful`});\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Perform PUT request to relation with body and url params.\r\n   *\r\n   * @param relationName used to get the specific relation link\r\n   * @param requestBody contains the body directly and body values option {@link ValuesOption}\r\n   *        to clarify what specific values need to be included or not included in result request body\r\n   * @param options (optional) request options that will be applied to the request\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public putRelation(relationName: string,\r\n                     requestBody: RequestBody<any>,\r\n                     options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    ValidationUtils.validateInputParams({relationName, requestBody});\r\n    StageLogger.resourceBeginLog(this, 'PUT_RELATION', {relationName, requestBody, options});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n\r\n    return getResourceHttpService()\r\n      .put(\r\n        UrlUtils.generateLinkUrl(relationLink, options),\r\n        ResourceUtils.resolveValues(requestBody),\r\n        {\r\n          ...options,\r\n          observe: options?.observe ? options.observe : 'body',\r\n          params: relationLink.templated ? undefined : options?.params\r\n        })\r\n      .pipe(\r\n        tap(() => {\r\n          StageLogger.resourceEndLog(this, 'PUT_RELATION', {result: `relation ${ relationName } was put successful`});\r\n        })\r\n      );\r\n  }\r\n\r\n}\r\n","import { BaseResource } from './base-resource';\r\nimport { getResourceHttpService } from '../../service/internal/resource-http.service';\r\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { UrlUtils } from '../../util/url.utils';\r\nimport { LinkData } from '../declarations';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Stage } from '../../logger/stage.enum';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { isArray, isNil, last, split } from 'lodash-es';\r\n\r\n/**\r\n * Resource class.\r\n * Should be extended by client model classes that represent entity objects.\r\n *\r\n * If you have an embedded entity then consider to use the {@link EmbeddedResource} class.\r\n */\r\n// tslint:disable:variable-name\r\nexport class Resource extends BaseResource {\r\n\r\n  /**\r\n   * Resource should has self link.\r\n   */\r\n  protected _links: {\r\n    self: LinkData;\r\n    [key: string]: LinkData;\r\n  };\r\n\r\n  /**\r\n   * Adding passed entities to the resource collection behind the relation name.\r\n   * Used POST method with 'Content-Type': 'text/uri-list'.\r\n   *\r\n   * This method DOES NOT REPLACE existing resources in the collection instead it adds new ones.\r\n   * To replace collection resource with passed entities use {@link bindRelation} method.\r\n   *\r\n   * @param relationName used to get the specific resource relation link to the resource collection\r\n   * @param entities one or more entities that should be added to the resource collection\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public addCollectionRelation<T extends Resource>(relationName: string, entities: Array<T>): Observable<HttpResponse<any>> {\r\n    StageLogger.resourceBeginLog(this, 'ADD_COLLECTION_RELATION', {relationName, resourceLinks: this._links, entities});\r\n    ValidationUtils.validateInputParams({relationName, entities});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n\r\n    const body = entities\r\n      .map(entity => {\r\n        return ResourceUtils.initResource(entity).getSelfLinkHref();\r\n      })\r\n      .join('\\n');\r\n\r\n    return getResourceHttpService().post(UrlUtils.generateLinkUrl(relationLink), body, {\r\n      observe: 'response',\r\n      headers: new HttpHeaders({'Content-Type': 'text/uri-list'})\r\n    }).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this, 'ADD_COLLECTION_RELATION',\r\n          {result: `collection relation ${ relationName } was updated successfully`});\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Bounding the passed entity or collection of entities to this resource by the relation name.\r\n   * Used PUT method with 'Content-Type': 'text/uri-list'.\r\n   *\r\n   * This method also REPLACED existing resources in the collection by passed entities.\r\n   * To add entities to collection resource use {@link addCollectionRelation} method.\r\n   *\r\n   * @param relationName with which will be associated passed entity to this resource\r\n   * @param entities one or more entities that should be bind to this resource\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public bindRelation<T extends Resource>(relationName: string, entities: T | Array<T>): Observable<HttpResponse<any>> {\r\n    StageLogger.resourceBeginLog(this, 'BIND_RELATION', {relationName, resourceLinks: this._links, entities});\r\n    ValidationUtils.validateInputParams({relationName, entities});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n    let body;\r\n    if (isArray(entities)) {\r\n      body = entities\r\n        .map(entity => {\r\n          return ResourceUtils.initResource(entity).getSelfLinkHref();\r\n        })\r\n        .join('\\n');\r\n    } else {\r\n      body = ResourceUtils.initResource(entities).getSelfLinkHref();\r\n    }\r\n\r\n    return getResourceHttpService().put(UrlUtils.generateLinkUrl(relationLink), body, {\r\n      observe: 'response',\r\n      headers: new HttpHeaders({'Content-Type': 'text/uri-list'})\r\n    }).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this, 'BIND_RELATION', {result: `relation ${ relationName } was bound successfully`});\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unbinding single resource relation behind resource name.\r\n   * Used DELETE method to relation resource link URL.\r\n   *\r\n   * This method DOES NOT WORK WITH COLLECTION RESOURCE relations.\r\n   * To clear collection resource relation use {@link unbindCollectionRelation} method.\r\n   * To delete one resource from resource collection use {@link deleteRelation} method.\r\n   *\r\n   * @param relationName resource relation name to unbind\r\n   */\r\n  public unbindRelation<T extends Resource>(relationName: string): Observable<HttpResponse<any>> {\r\n    StageLogger.resourceBeginLog(this, 'UNBIND_RELATION', {relationName, resourceLinks: this._links});\r\n    ValidationUtils.validateInputParams({relationName});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n\r\n    return getResourceHttpService().delete(UrlUtils.generateLinkUrl(relationLink), {\r\n      observe: 'response',\r\n    }).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this, 'UNBIND_RELATION', {result: `relation ${ relationName } was unbound successfully`});\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unbind all resources from collection by the relation name.\r\n   * Used PUT method with 'Content-Type': 'text/uri-list' and EMPTY body to clear relations.\r\n   *\r\n   * To delete one resource from collection use {@link deleteRelation} method.\r\n   * To delete single resource relations use {@link unbindRelation} or {@link deleteRelation} methods.\r\n   *\r\n   * @param relationName used to get relation link to unbind\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public unbindCollectionRelation<T extends Resource>(relationName: string): Observable<HttpResponse<any>> {\r\n    StageLogger.resourceBeginLog(this, 'UNBIND_COLLECTION_RELATION', {relationName, resourceLinks: this._links});\r\n    ValidationUtils.validateInputParams({relationName});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n\r\n    return getResourceHttpService().put(UrlUtils.generateLinkUrl(relationLink), '', {\r\n      observe: 'response',\r\n      headers: new HttpHeaders({'Content-Type': 'text/uri-list'})\r\n    }).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this, 'UNBIND_COLLECTION_RELATION', {result: `relation ${ relationName } was unbound successfully`});\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deleting resource relation.\r\n   * For collection, means that only passed entity will be unbound from the collection.\r\n   * For single resource, deleting relation the same as @{link unbindRelation} method.\r\n   *\r\n   * To delete all resource relations from collection use {@link unbindCollectionRelation} method.\r\n   *\r\n   * @param relationName used to get relation link to unbind\r\n   * @param entity that should be unbind from this relation\r\n   * @throws error when required params are not valid or link not found by relation name\r\n   */\r\n  public deleteRelation<T extends Resource>(relationName: string, entity: T): Observable<HttpResponse<any>> {\r\n    StageLogger.resourceBeginLog(this, 'DELETE_RELATION', {relationName, resourceLinks: this._links, entity});\r\n    ValidationUtils.validateInputParams({relationName, entity});\r\n\r\n    const relationLink = this.getRelationLink(relationName);\r\n    const resource = ResourceUtils.initResource(entity) as Resource;\r\n    const resourceId = last(split(UrlUtils.generateLinkUrl(resource._links.self), '/'));\r\n\r\n    if (isNil(resourceId) || resourceId === '') {\r\n      StageLogger.stageErrorLog(Stage.PREPARE_URL, {\r\n        step: 'ResolveResourceId',\r\n        error: 'Passed resource self link should has id',\r\n        selfLink: UrlUtils.generateLinkUrl(resource._links.self)\r\n      });\r\n      throw Error('Passed resource self link should has id');\r\n    }\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      step: 'ResolveResourceId',\r\n      result: resourceId\r\n    });\r\n\r\n    return getResourceHttpService().delete(UrlUtils.generateLinkUrl(relationLink) + '/' + resourceId, {\r\n      observe: 'response'\r\n    }).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this, 'DELETE_RELATION', {result: `relation ${ relationName } was deleted successfully`});\r\n      })\r\n    );\r\n  }\r\n\r\n  public getSelfLinkHref(): string {\r\n    return this._links.self.href;\r\n  }\r\n\r\n}\r\n","import { AbstractResource } from './abstract-resource';\r\nimport { BaseResource } from './base-resource';\r\n\r\n/**\r\n * Collection of resources without pagination.\r\n *\r\n * If you want to have a pagination {@see PagedResourceCollection}.\r\n */\r\nexport class ResourceCollection<T extends BaseResource> extends AbstractResource {\r\n\r\n  public resources: Array<T> = [];\r\n\r\n  /**\r\n   * Resource collection constructor.\r\n   * If passed param then it used as a copy constructor.\r\n   *\r\n   * @param that (optional) another resource collection using to copy data from to current object\r\n   */\r\n  constructor(that?: ResourceCollection<T>) {\r\n    super();\r\n    if (that) {\r\n      this._links = that._links;\r\n      this.resources = that.resources;\r\n    }\r\n  }\r\n\r\n}\r\n","import { BaseResource } from './base-resource';\r\n\r\n/**\r\n * Using for model classes that it's not Resource but can hold Resources as property, for example is Embeddable entity.\r\n * A distinctive feature of such resources is that they do not have the <b>self</b> link while {@link Resource} has.\r\n * It's related with that Embeddable entity can't have an id property.\r\n *\r\n * Usage example:\r\n *\r\n * // Regular resource\r\n * class Product extends Resource {\r\n *   name: string;\r\n * }\r\n *\r\n * // EmbeddedResource that holds Product resource.\r\n * class CartItem extends EmbeddedResource {\r\n *   product: Product;\r\n * }\r\n */\r\nexport class EmbeddedResource extends BaseResource {\r\n}\r\n","import { ResourceCollection } from './resource-collection';\r\nimport { BaseResource } from './base-resource';\r\nimport { Observable, throwError as observableThrowError } from 'rxjs';\r\nimport { getPagedResourceCollectionHttpService } from '../../service/internal/paged-resource-collection-http.service';\r\nimport { LinkData, PageData, Sort, SortedPageParam } from '../declarations';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { Stage } from '../../logger/stage.enum';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { isEmpty, isNumber, result } from 'lodash-es';\r\n\r\n/**\r\n * Collection of resources with pagination.\r\n */\r\nexport class PagedResourceCollection<T extends BaseResource> extends ResourceCollection<T> {\r\n\r\n  private readonly selfLink: LinkData;\r\n  private readonly nextLink: LinkData;\r\n  private readonly prevLink: LinkData;\r\n  private readonly firstLink: LinkData;\r\n  private readonly lastLink: LinkData;\r\n\r\n  public readonly totalElements: number;\r\n  public readonly totalPages: number;\r\n  public readonly pageNumber: number;\r\n  public readonly pageSize: number;\r\n\r\n  /**\r\n   * Create a new paged resource collection from resource collection with the page data.\r\n   *\r\n   * @param resourceCollection collection that will be paged\r\n   * @param pageData contains data about characteristics of the page.\r\n   */\r\n  constructor(resourceCollection: ResourceCollection<T>, pageData?: PageData) {\r\n    super(resourceCollection);\r\n    this.totalElements = result(pageData, 'page.totalElements', 0);\r\n    this.totalPages = result(pageData, 'page.totalPages', 1);\r\n    this.pageSize = result(pageData, 'page.size', 20);\r\n    this.pageNumber = result(pageData, 'page.number', 0);\r\n\r\n    this.selfLink = result(pageData, '_links.self', null);\r\n    this.nextLink = result(pageData, '_links.next', null);\r\n    this.prevLink = result(pageData, '_links.prev', null);\r\n    this.firstLink = result(pageData, '_links.first', null);\r\n    this.lastLink = result(pageData, '_links.last', null);\r\n  }\r\n\r\n  public hasFirst(): boolean {\r\n    return !!this.firstLink && !!this.firstLink.href;\r\n  }\r\n\r\n  public hasLast(): boolean {\r\n    return !!this.lastLink && !!this.lastLink.href;\r\n  }\r\n\r\n  public hasNext(): boolean {\r\n    return !!this.nextLink && !!this.nextLink.href;\r\n  }\r\n\r\n  public hasPrev(): boolean {\r\n    return !!this.prevLink && !!this.prevLink.href;\r\n  }\r\n\r\n  public first(options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    StageLogger.resourceBeginLog(this.resources[0], 'GET_FIRST_PAGE');\r\n    if (!this.hasFirst()) {\r\n      const errMsg = 'Page has not first url';\r\n      StageLogger.stageErrorLog(Stage.PREPARE_URL, {error: errMsg});\r\n      return observableThrowError(new Error(errMsg));\r\n    }\r\n    return doRequest<T>(this.firstLink.href, options?.useCache).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this.resources[0], 'GET_FIRST_PAGE', {result: 'get first page was performed successful'});\r\n      })\r\n    );\r\n  }\r\n\r\n  public last(options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    StageLogger.resourceBeginLog(this.resources[0], 'GET_LAST_PAGE');\r\n    if (!this.hasLast()) {\r\n      const errMsg = 'Page has not last url';\r\n      StageLogger.stageErrorLog(Stage.PREPARE_URL, {error: errMsg});\r\n      return observableThrowError(new Error(errMsg));\r\n    }\r\n    return doRequest<T>(this.lastLink.href, options?.useCache).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this.resources[0], 'GET_LAST_PAGE', {result: 'get last page was performed successful'});\r\n      })\r\n    );\r\n  }\r\n\r\n  public next(options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    StageLogger.resourceBeginLog(this.resources[0], 'GET_NEXT_PAGE');\r\n    if (!this.hasNext()) {\r\n      const errMsg = 'Page has not next url';\r\n      StageLogger.stageErrorLog(Stage.PREPARE_URL, {error: errMsg});\r\n      return observableThrowError(new Error(errMsg));\r\n    }\r\n    return doRequest<T>(this.nextLink.href, options?.useCache).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this.resources[0], 'GET_NEXT_PAGE', {result: 'get next page was performed successful'});\r\n      })\r\n    );\r\n  }\r\n\r\n  public prev(options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    StageLogger.resourceBeginLog(this.resources[0], 'GET_PREV_PAGE');\r\n    if (!this.hasPrev()) {\r\n      const errMsg = 'Page has not prev url';\r\n      StageLogger.stageErrorLog(Stage.PREPARE_URL, {error: errMsg});\r\n      return observableThrowError(new Error(errMsg));\r\n    }\r\n    return doRequest<T>(this.prevLink.href, options?.useCache).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this.resources[0], 'GET_PREV_PAGE', {result: 'get prev page was performed successful'});\r\n      })\r\n    );\r\n  }\r\n\r\n  public page(pageNumber: number, options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    return this.customPage({pageParams: {page: pageNumber}}, options);\r\n  }\r\n\r\n  public size(size: number, options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    return this.customPage({pageParams: {page: 0, size}}, options);\r\n  }\r\n\r\n  public sortElements(sortParam: Sort, options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    return this.customPage({sort: sortParam}, options);\r\n  }\r\n\r\n  /**\r\n   * Perform query with custom page data.\r\n   * That allows you change page size, current page or sort options.\r\n   *\r\n   * @param params contains data about new characteristics of the page.\r\n   * @param options (optional) additional options that will be applied to the request\r\n   * @throws error when required params are not valid or when passed inconsistent data\r\n   */\r\n  public customPage(params: SortedPageParam, options?: { useCache: true }): Observable<PagedResourceCollection<T>> {\r\n    StageLogger.resourceBeginLog(this.resources[0], 'CustomPage', {pageParam: params.pageParams});\r\n\r\n    if (!params.pageParams || isEmpty(params.pageParams)) {\r\n      params.pageParams = {};\r\n      params.pageParams.page = this.pageNumber;\r\n      params.pageParams.size = this.pageSize;\r\n    }\r\n    if (!isNumber(params.pageParams.page) || params.pageParams.page < 0) {\r\n      params.pageParams.page = this.pageNumber;\r\n      StageLogger.stageLog(Stage.PREPARE_PARAMS, {\r\n        message: 'Page number is not passed will be used current value',\r\n        currentPageNumber: this.pageNumber\r\n      });\r\n    }\r\n    if (!isNumber(params.pageParams.size) || params.pageParams.size < 0) {\r\n      params.pageParams.size = this.pageSize;\r\n      StageLogger.stageLog(Stage.PREPARE_PARAMS, {\r\n        message: 'Page size is not passed will be used current value',\r\n        currentPageSize: this.pageSize\r\n      });\r\n    }\r\n\r\n    const maxPageNumber = (this.totalElements / params.pageParams.size);\r\n    if (params.pageParams.page > maxPageNumber) {\r\n      const errMsg = `Error page number. Max page number is ${ parseInt(maxPageNumber + '', 10) }`;\r\n      StageLogger.stageErrorLog(Stage.PREPARE_PARAMS, {error: errMsg});\r\n      return observableThrowError(errMsg);\r\n    }\r\n\r\n    const requestUrl = new URL(this.selfLink.href);\r\n    requestUrl.searchParams.delete('page');\r\n    requestUrl.searchParams.delete('size');\r\n    requestUrl.searchParams.delete('sort');\r\n    return doRequest<T>(requestUrl.href, options?.useCache, params).pipe(\r\n      tap(() => {\r\n        StageLogger.resourceEndLog(this.resources[0], 'CustomPage', {result: 'custom page was performed successful'});\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n\r\nfunction doRequest<T extends BaseResource>(url: string,\r\n                                           useCache: boolean = true,\r\n                                           params?: SortedPageParam): Observable<PagedResourceCollection<T>> {\r\n  ValidationUtils.validateInputParams({url});\r\n\r\n  return getPagedResourceCollectionHttpService()\r\n    .get(url, {...params, useCache}) as Observable<PagedResourceCollection<T>>;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { DependencyInjector } from '../util/dependency-injector';\r\nimport { LibConfig } from './lib-config';\r\nimport { HateoasConfiguration } from './hateoas-configuration.interface';\r\nimport { ConsoleLogger } from '../logger/console-logger';\r\nimport { ResourceUtils } from '../util/resource.utils';\r\nimport { Resource } from '../model/resource/resource';\r\nimport { ResourceCollection } from '../model/resource/resource-collection';\r\nimport { EmbeddedResource } from '../model/resource/embedded-resource';\r\nimport { PagedResourceCollection } from '../model/resource/paged-resource-collection';\r\nimport { ValidationUtils } from '../util/validation.utils';\r\n\r\n/**\r\n * This service for configuration library.\r\n *\r\n * You should inject this service in your main AppModule and pass\r\n * configuration using {@link #configure()} method.\r\n */\r\n@Injectable()\r\nexport class NgxHateoasClientConfigurationService {\r\n\r\n  constructor(private injector: Injector) {\r\n    DependencyInjector.injector = injector;\r\n    // Setting resource types to prevent circular dependencies\r\n    ResourceUtils.useResourceType(Resource);\r\n    ResourceUtils.useResourceCollectionType(ResourceCollection);\r\n    ResourceUtils.usePagedResourceCollectionType(PagedResourceCollection);\r\n    ResourceUtils.useEmbeddedResourceType(EmbeddedResource);\r\n  }\r\n\r\n  /**\r\n   * Configure library with client params.\r\n   *\r\n   * @param config suitable client properties needed to properly library work\r\n   */\r\n  public configure(config: HateoasConfiguration): void {\r\n    ValidationUtils.validateInputParams({config, baseApi: config?.http?.rootUrl});\r\n\r\n    LibConfig.setConfig(config);\r\n\r\n    ConsoleLogger.prettyInfo('HateoasClient was configured with options', {\r\n      rootUrl: config.http.rootUrl\r\n    });\r\n  }\r\n\r\n}\r\n","import { HttpExecutor } from '../http-executor';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError as observableThrowError } from 'rxjs';\r\nimport { HttpMethod, PagedGetOption } from '../../model/declarations';\r\nimport { UrlUtils } from '../../util/url.utils';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { isPagedResourceCollection, isResource, isResourceCollection } from '../../model/resource-type';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { Stage } from '../../logger/stage.enum';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { ResourceCacheService } from './cache/resource-cache.service';\r\n\r\n/**\r\n * Service to perform HTTP requests to get any type of the {@link Resource}, {@link PagedResourceCollection}, {@link ResourceCollection}.\r\n */\r\n@Injectable()\r\nexport class CommonResourceHttpService extends HttpExecutor {\r\n\r\n  constructor(httpClient: HttpClient,\r\n              cacheService: ResourceCacheService) {\r\n    super(httpClient, cacheService);\r\n  }\r\n\r\n  /**\r\n   * Perform custom HTTP request.\r\n   *\r\n   * Return type depends on result data it can be {@link Resource}, {@link ResourceCollection},\r\n   * {@link PagedResourceCollection} or any data.\r\n   *\r\n   * @param resourceName used to build root url to the resource\r\n   * @param method HTTP method that will be perform {@link HttpMethod}\r\n   * @param query url path that applied to the result url at the end\r\n   * @param body (optional) request body\r\n   * @param options (optional) options that applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public customQuery(resourceName: string, method: HttpMethod, query: string, body?: any, options?: PagedGetOption): Observable<any> {\r\n    ValidationUtils.validateInputParams({resourceName, method, query});\r\n\r\n    const url = UrlUtils.generateResourceUrl(UrlUtils.getApiUrl(), resourceName, query);\r\n\r\n    StageLogger.stageLog(Stage.PREPARE_URL, {\r\n      result: url,\r\n      urlParts: `baseUrl: '${ UrlUtils.getApiUrl() }', resource: '${ resourceName }', query: '${ query }'`,\r\n      options\r\n    });\r\n\r\n    const httpOptions = UrlUtils.convertToHttpOptions(options);\r\n\r\n    let result: Observable<any>;\r\n    switch (method) {\r\n      case HttpMethod.GET:\r\n        result = super.getHttp(url, httpOptions, false);\r\n        break;\r\n      case HttpMethod.POST:\r\n        result = super.postHttp(url, body, httpOptions);\r\n        break;\r\n      case HttpMethod.PUT:\r\n        result = super.putHttp(url, body, httpOptions);\r\n        break;\r\n      case HttpMethod.PATCH:\r\n        result = super.patchHttp(url, body, httpOptions);\r\n        break;\r\n      default:\r\n        const errMsg = `allowed ony GET/POST/PUT/PATCH http methods you pass ${ method }`;\r\n        StageLogger.stageErrorLog(Stage.HTTP_REQUEST, {error: errMsg, options});\r\n        return observableThrowError(new Error(errMsg));\r\n    }\r\n\r\n    return result.pipe(\r\n      map(data => {\r\n        const isProjection = httpOptions?.params?.has('projection');\r\n        if (isPagedResourceCollection(data)) {\r\n          return ResourceUtils.instantiatePagedResourceCollection(data, isProjection);\r\n        } else if (isResourceCollection(data)) {\r\n          return ResourceUtils.instantiateResourceCollection(data, isProjection);\r\n        } else if (isResource(data)) {\r\n          return ResourceUtils.instantiateResource(data, isProjection);\r\n        } else {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ResourceHttpService } from '../internal/resource-http.service';\r\nimport { PagedResourceCollectionHttpService } from '../internal/paged-resource-collection-http.service';\r\nimport { PagedResourceCollection } from '../../model/resource/paged-resource-collection';\r\nimport { GetOption, HttpMethod, PagedGetOption, RequestBody, RequestOption } from '../../model/declarations';\r\nimport { ResourceUtils } from '../../util/resource.utils';\r\nimport { ResourceCollection } from '../../model/resource/resource-collection';\r\nimport { ResourceCollectionHttpService } from '../internal/resource-collection-http.service';\r\nimport { CommonResourceHttpService } from '../internal/common-resource-http.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Resource } from '../../model/resource/resource';\r\nimport { StageLogger } from '../../logger/stage-logger';\r\nimport { ValidationUtils } from '../../util/validation.utils';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\n/**\r\n * Service to operate with {@link Resource}.\r\n *\r\n * Can be injected as standalone service to work with {@link Resource}.\r\n */\r\n\r\n/* tslint:disable:no-string-literal */\r\n@Injectable()\r\nexport class HateoasResourceService {\r\n\r\n  constructor(private commonHttpService: CommonResourceHttpService,\r\n              private resourceHttpService: ResourceHttpService,\r\n              private resourceCollectionHttpService: ResourceCollectionHttpService,\r\n              private pagedResourceCollectionHttpService: PagedResourceCollectionHttpService) {\r\n  }\r\n\r\n  /**\r\n   * Get resource by id.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param id resource id\r\n   * @param options (optional) options that should be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getResource<T extends Resource>(resourceType: new () => T, id: number | string, options?: GetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceType, id});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService GET_RESOURCE', {id, options});\r\n\r\n    return this.resourceHttpService.getResource<T>(resourceName, id, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService GET_RESOURCE',\r\n          {result: `get resource '${ resourceName }' was successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Get collection of the resource by id.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param options (optional) options that should be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getCollection<T extends Resource>(resourceType: new () => T, options?: GetOption): Observable<ResourceCollection<T>> {\r\n    ValidationUtils.validateInputParams({resourceType});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService GET_COLLECTION', {options});\r\n\r\n    return this.resourceCollectionHttpService.getResourceCollection<ResourceCollection<T>>(resourceName, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService GET_COLLECTION',\r\n          {result: `get all resources by '${ resourceName }' was successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Get paged collection of the resource by id.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param options (optional) options that should be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public getPage<T extends Resource>(resourceType: new () => T, options?: PagedGetOption): Observable<PagedResourceCollection<T>> {\r\n    ValidationUtils.validateInputParams({resourceType});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService GET_PAGE', {options});\r\n\r\n    return this.pagedResourceCollectionHttpService.getResourcePage<PagedResourceCollection<T>>(resourceName, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService GET_PAGE',\r\n          {result: `get all page resources by '${ resourceName }' was successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Create resource.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}\r\n   * @param options (optional) options that should be applied to the request {@link RequestOption}\r\n   * @throws error when required params are not valid\r\n   */\r\n  public createResource<T extends Resource>(resourceType: new () => T,\r\n                                            requestBody: RequestBody<T>,\r\n                                            options?: RequestOption): Observable<T | any> {\r\n    ValidationUtils.validateInputParams({resourceType, requestBody});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService CREATE_RESOURCE', {requestBody, options});\r\n\r\n    const body = ResourceUtils.resolveValues(requestBody);\r\n\r\n    return this.resourceHttpService.postResource(resourceName, body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService CREATE_RESOURCE',\r\n          {result: `resource '${ resourceName }' was created successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Updating all resource properties at the time to passed body properties. If some properties are not passed then will be used null value.\r\n   * If you need update some part resource properties, use {@link HateoasResourceService#patchResource} method.\r\n   *\r\n   * @param entity to update\r\n   * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}\r\n   * @param options (optional) options that should be applied to the request {@link RequestOption}\r\n   * @throws error when required params are not valid\r\n   */\r\n  public updateResource<T extends Resource>(entity: T,\r\n                                            requestBody?: RequestBody<any>,\r\n                                            options?: RequestOption): Observable<T | any> {\r\n    ValidationUtils.validateInputParams({entity});\r\n    StageLogger.resourceBeginLog(entity, 'ResourceService UPDATE_RESOURCE', {body: requestBody ? requestBody : entity, options});\r\n\r\n    const resource = ResourceUtils.initResource(entity) as Resource;\r\n    const body = ResourceUtils.resolveValues(requestBody ? requestBody : {body: entity});\r\n\r\n    return this.resourceHttpService.put(resource.getSelfLinkHref(), body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(entity, 'ResourceService UPDATE_RESOURCE',\r\n          {result: `resource '${ resource['__resourceName__'] }' was updated successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Update resource by id.\r\n   * Updating all resource properties at the time to passed body properties. If some properties are not passed then will be used null value.\r\n   * If you need update some part resource properties, use {@link HateoasResourceService#patchResource} method.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param id resource id\r\n   * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}\r\n   * @param options (optional) options that should be applied to the request {@link RequestOption}\r\n   * @throws error when required params are not valid\r\n   */\r\n  public updateResourceById<T extends Resource>(resourceType: new () => T,\r\n                                                id: number | string,\r\n                                                requestBody: RequestBody<any>,\r\n                                                options?: RequestOption): Observable<T | any> {\r\n    ValidationUtils.validateInputParams({resourceType, id, requestBody});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService UPDATE_RESOURCE_BY_ID', {id, body: requestBody, options});\r\n\r\n    const body = ResourceUtils.resolveValues(requestBody);\r\n\r\n    return this.resourceHttpService.putResource(resourceName, id, body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService UPDATE_RESOURCE_BY_ID',\r\n          {result: `resource '${ resourceName }' with id ${ id } was updated successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Patch resource.\r\n   * Allows fine-grained update resource properties, it means that only passed properties in body will be changed,\r\n   * other properties stay as is.\r\n   *\r\n   * @param entity to patch\r\n   * @param requestBody (optional) contains the body that will be patched resource and optional body values option {@link ValuesOption}\r\n   *        if not passed then entity will be passed as body directly\r\n   * @param options (optional) options that should be applied to the request {@link RequestOption}\r\n   * @throws error when required params are not valid\r\n   */\r\n  public patchResource<T extends Resource>(entity: T,\r\n                                           requestBody?: RequestBody<any>,\r\n                                           options?: RequestOption): Observable<T | any> {\r\n    ValidationUtils.validateInputParams({entity});\r\n    StageLogger.resourceBeginLog(entity, 'ResourceService PATCH_RESOURCE', {body: requestBody ? requestBody : entity, options});\r\n\r\n    const resource = ResourceUtils.initResource(entity) as Resource;\r\n    const body = ResourceUtils.resolveValues(requestBody ? requestBody : {body: entity});\r\n\r\n    return this.resourceHttpService.patch(resource.getSelfLinkHref(), body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(entity, 'ResourceService PATCH_RESOURCE',\r\n          {result: `resource '${ entity['__resourceName__'] }' was patched successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Patch resource by id.\r\n   * Allows fine-grained update resource properties, it means that only passed properties in body will be changed,\r\n   * other properties stay as is.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param id resource id\r\n   * @param requestBody that contains the body directly and optional body values option {@link ValuesOption}\r\n   * @param options (optional) options that should be applied to the request {@link RequestOption}\r\n   * @throws error when required params are not valid\r\n   */\r\n  public patchResourceById<T extends Resource>(resourceType: new () => T,\r\n                                               id: number | string,\r\n                                               requestBody: RequestBody<any>,\r\n                                               options?: RequestOption): Observable<T | any> {\r\n    ValidationUtils.validateInputParams({resourceType, id, requestBody});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService PATCH_RESOURCE_BY_ID', {id, body: requestBody, options});\r\n\r\n    const body = ResourceUtils.resolveValues(requestBody);\r\n\r\n    return this.resourceHttpService.patchResource(resourceName, id, body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService PATCH_RESOURCE_BY_ID',\r\n          {result: `resource '${ resourceName }' with id ${ id } was patched successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Delete resource.\r\n   *\r\n   * @param entity to delete\r\n   * @param options (optional) options that should be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public deleteResource<T extends Resource>(entity: T, options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    ValidationUtils.validateInputParams({entity});\r\n    StageLogger.resourceBeginLog(entity, 'ResourceService DELETE_RESOURCE', {options});\r\n\r\n    const resource = ResourceUtils.initResource(entity) as Resource;\r\n\r\n    return this.resourceHttpService.delete(resource.getSelfLinkHref(), options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(entity, 'ResourceService DELETE_RESOURCE',\r\n          {result: `resource '${ resource['__resourceName__'] }' was deleted successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Delete resource by id.\r\n   *\r\n   * @param resourceType resource for which will perform request\r\n   * @param id resource id\r\n   * @param options (optional) options that should be applied to the request\r\n   * @throws error when required params are not valid\r\n   */\r\n  public deleteResourceById<T extends Resource>(resourceType: new () => T,\r\n                                                id: number | string,\r\n                                                options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    ValidationUtils.validateInputParams({resourceType, id});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService DELETE_RESOURCE_BY_ID', {id, options});\r\n\r\n    return this.resourceHttpService.deleteResource(resourceName, id, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService DELETE_RESOURCE_BY_ID',\r\n          {result: `resource '${ resourceName }' with id ${ id } was deleted successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * {@see ResourceCollectionHttpService#search}\r\n   */\r\n  public searchCollection<T extends Resource>(resourceType: new () => T,\r\n                                              searchQuery: string,\r\n                                              options?: GetOption): Observable<ResourceCollection<T>> {\r\n    ValidationUtils.validateInputParams({resourceType, searchQuery});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService SEARCH_COLLECTION', {query: searchQuery, options});\r\n\r\n    return this.resourceCollectionHttpService.search<ResourceCollection<T>>(resourceName, searchQuery, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService SEARCH_COLLECTION',\r\n          {result: `search collection by '${ resourceName }' was performed successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * {@see PagedResourceCollection#search}\r\n   */\r\n  public searchPage<T extends Resource>(resourceType: new () => T,\r\n                                        searchQuery: string,\r\n                                        options?: PagedGetOption): Observable<PagedResourceCollection<T>> {\r\n    ValidationUtils.validateInputParams({resourceType, searchQuery});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService SEARCH_PAGE', {query: searchQuery, options});\r\n\r\n    return this.pagedResourceCollectionHttpService.search<PagedResourceCollection<T>>(resourceName, searchQuery, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService SEARCH_PAGE',\r\n          {result: `search page by '${ resourceName }' was performed successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * {@see ResourceHttpService#search}\r\n   */\r\n  public searchResource<T extends Resource>(resourceType: new () => T, searchQuery: string, options?: GetOption): Observable<T> {\r\n    ValidationUtils.validateInputParams({resourceType, searchQuery});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService SEARCH_SINGLE', {query: searchQuery, options});\r\n\r\n    return this.resourceHttpService.search<T>(resourceName, searchQuery, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService SEARCH_SINGLE',\r\n          {result: `search single by '${ resourceName }' was performed successful`});\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * {@see CommonResourceHttpService#customQuery}\r\n   */\r\n  public customQuery<R>(resourceType: new () => Resource,\r\n                        method: HttpMethod,\r\n                        query: string,\r\n                        requestBody?: RequestBody<any>,\r\n                        options?: PagedGetOption): Observable<R> {\r\n    ValidationUtils.validateInputParams({resourceType, method, query});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService CUSTOM_QUERY', {\r\n      method: HttpMethod,\r\n      query,\r\n      requestBody,\r\n      options\r\n    });\r\n\r\n    const body = ResourceUtils.resolveValues(requestBody);\r\n\r\n    return this.commonHttpService.customQuery(resourceName, method, query, body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService CUSTOM_QUERY',\r\n          {result: `custom query by '${ resourceName }' was performed successful`});\r\n      })) as Observable<R>;\r\n  }\r\n\r\n  /**\r\n   * Differences between {@link HateoasResourceService#customQuery} and this method\r\n   * that this one puts 'search' path to the result url automatically.\r\n   *\r\n   * {@see CommonResourceHttpService#customQuery}\r\n   */\r\n  public customSearchQuery<R>(resourceType: new () => Resource,\r\n                              method: HttpMethod,\r\n                              searchQuery: string,\r\n                              requestBody?: RequestBody<any>,\r\n                              options?: PagedGetOption): Observable<R> {\r\n    ValidationUtils.validateInputParams({resourceType, method, searchQuery});\r\n    const resourceName = resourceType['__resourceName__'];\r\n    options = ResourceUtils.fillProjectionNameFromResourceType(resourceType, options);\r\n    StageLogger.resourceBeginLog(resourceName, 'ResourceService CUSTOM_SEARCH_QUERY', {\r\n      method: HttpMethod,\r\n      searchQuery,\r\n      requestBody,\r\n      options\r\n    });\r\n\r\n    const body = ResourceUtils.resolveValues(requestBody);\r\n    const query = `/search${ searchQuery.startsWith('/') ? searchQuery : '/' + searchQuery }`;\r\n    return this.commonHttpService.customQuery(resourceName, method, query, body, options)\r\n      .pipe(tap(() => {\r\n        StageLogger.resourceEndLog(resourceName, 'ResourceService CUSTOM_SEARCH_QUERY',\r\n          {result: `custom search query by '${ resourceName }' was performed successful`});\r\n      })) as Observable<R>;\r\n  }\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { DependencyInjector } from '../../util/dependency-injector';\r\nimport { HateoasResourceService } from './hateoas-resource.service';\r\nimport { GetOption, HttpMethod, PagedGetOption, RequestBody, RequestOption } from '../../model/declarations';\r\nimport { Resource } from '../../model/resource/resource';\r\nimport { PagedResourceCollection } from '../../model/resource/paged-resource-collection';\r\nimport { ResourceCollection } from '../../model/resource/resource-collection';\r\nimport { HttpResponse } from '@angular/common/http';\r\n\r\n/**\r\n * Main resource operation class.\r\n * Extend this class to create resource service.\r\n */\r\nexport class HateoasResourceOperation<T extends Resource> {\r\n\r\n  private readonly resourceType: new() => T;\r\n\r\n  private hateoasResourceService: HateoasResourceService;\r\n\r\n  constructor(resourceType: new() => T) {\r\n    this.resourceType = resourceType;\r\n    this.hateoasResourceService = DependencyInjector.get(HateoasResourceService);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#getResource}.\r\n   */\r\n  public getResource(id: number | string, options?: GetOption): Observable<T> {\r\n    return this.hateoasResourceService.getResource(this.resourceType, id, options) as Observable<T>;\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#getCollection}.\r\n   */\r\n  public getCollection(options?: GetOption): Observable<ResourceCollection<T>> {\r\n    return this.hateoasResourceService.getCollection(this.resourceType, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#getPage}.\r\n   */\r\n  public getPage(options?: PagedGetOption): Observable<PagedResourceCollection<T>> {\r\n    return this.hateoasResourceService.getPage(this.resourceType, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#createResource}.\r\n   */\r\n  public createResource(requestBody: RequestBody<T>, options?: RequestOption): Observable<any> {\r\n    return this.hateoasResourceService.createResource(this.resourceType, requestBody, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#updateResource}.\r\n   */\r\n  public updateResource(entity: T, requestBody?: RequestBody<any>, options?: RequestOption): Observable<T | any> {\r\n    return this.hateoasResourceService.updateResource(entity, requestBody, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#updateResourceById}.\r\n   */\r\n  public updateResourceById(id: number | string, requestBody: RequestBody<any>, options?: RequestOption): Observable<T | any> {\r\n    return this.hateoasResourceService.updateResourceById(this.resourceType, id, requestBody, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#patchResource}.\r\n   */\r\n  public patchResource(entity: T, requestBody?: RequestBody<any>, options?: RequestOption): Observable<T | any> {\r\n    return this.hateoasResourceService.patchResource(entity, requestBody, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#patchResourceById}.\r\n   */\r\n  public patchResourceById(id: number | string, requestBody: RequestBody<any>, options?: RequestOption): Observable<T | any> {\r\n    return this.hateoasResourceService.patchResourceById(this.resourceType, id, requestBody, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#deleteResource}.\r\n   */\r\n  public deleteResource(entity: T, options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    return this.hateoasResourceService.deleteResource(entity, options);\r\n  }\r\n\r\n  /**\r\n   * {@link HateoasResourceService#deleteResourceById}.\r\n   */\r\n  public deleteResourceById(id: number | string, options?: RequestOption): Observable<HttpResponse<any> | any> {\r\n    return this.hateoasResourceService.deleteResourceById(this.resourceType, id, options);\r\n  }\r\n\r\n  /**\r\n   * {@see ResourceCollectionHttpService#search}\r\n   */\r\n  public searchCollection(query: string, options?: GetOption): Observable<ResourceCollection<T>> {\r\n    return this.hateoasResourceService.searchCollection(this.resourceType, query, options);\r\n  }\r\n\r\n  /**\r\n   * {@see PagedResourceCollection#search}\r\n   */\r\n  public searchPage(query: string, options?: PagedGetOption): Observable<PagedResourceCollection<T>> {\r\n    return this.hateoasResourceService.searchPage(this.resourceType, query, options);\r\n  }\r\n\r\n  /**\r\n   * {@see ResourceHttpService#search}\r\n   */\r\n  public searchResource(query: string, options?: GetOption): Observable<T> {\r\n    return this.hateoasResourceService.searchResource(this.resourceType, query, options);\r\n  }\r\n\r\n  /**\r\n   * {@see ResourceHttpService#customQuery}\r\n   */\r\n  public customQuery<R>(method: HttpMethod,\r\n                        query: string,\r\n                        requestBody?: RequestBody<any>,\r\n                        options?: PagedGetOption): Observable<R> {\r\n    return this.hateoasResourceService.customQuery(this.resourceType, method, query, requestBody, options);\r\n  }\r\n\r\n  /**\r\n   * {@see ResourceHttpService#customSearchQuery}\r\n   */\r\n  public customSearchQuery<R>(method: HttpMethod,\r\n                              searchQuery: string,\r\n                              requestBody?: RequestBody<any>,\r\n                              options?: PagedGetOption): Observable<R> {\r\n    return this.hateoasResourceService.customSearchQuery(this.resourceType, method, searchQuery, requestBody, options);\r\n  }\r\n\r\n}\r\n","/* tslint:disable:no-string-literal */\r\nimport { ResourceUtils } from '../util/resource.utils';\r\nimport { isArray, isEmpty, isNull, isUndefined } from 'lodash-es';\r\nimport { Resource } from './resource/resource';\r\nimport { EmbeddedResource } from './resource/embedded-resource';\r\nimport { BaseResource } from './resource/base-resource';\r\n\r\n/**\r\n * Decorator used to classes that extend {@link Resource} class to register 'resourceName' and 'resourceType'\r\n * information about this resource.\r\n *\r\n * @param resourceName resource name which will be used to build a resource URL.\r\n */\r\nexport function HateoasResource(resourceName: string) {\r\n  return <T extends new(...args: any[]) => any>(constructor: T) => {\r\n    if (isNull(resourceName) || isUndefined(resourceName) || !resourceName) {\r\n      throw new Error(`Init resource '${ constructor.name }' error. @HateoasResource decorator param resourceName can not be null/undefined/empty, please pass a valid resourceName.`);\r\n    }\r\n\r\n    if (!isInstanceOfParent(constructor, Resource)) {\r\n      throw new Error(`Init resource '${ constructor.name }' error. @HateoasResource decorator applied only to 'Resource' type, you used it with ${ Object.getPrototypeOf(constructor) } type.`);\r\n    }\r\n    constructor['__resourceName__'] = resourceName;\r\n    ResourceUtils.RESOURCE_NAME_TYPE_MAP.set(resourceName.toLowerCase(), constructor);\r\n\r\n    return constructor;\r\n  };\r\n}\r\n\r\n/**\r\n * Decorator used to classes that extend {@link EmbeddedResource} class to register 'relationNames' and 'resourceType'\r\n * information about this resource.\r\n *\r\n * @param relationNames names of the properties that using to hold this embedded resource in resource objects.\r\n */\r\nexport function HateoasEmbeddedResource(relationNames: Array<string>) {\r\n  return <T extends new(...args: any[]) => any>(constructor: T) => {\r\n    if (isNull(relationNames)\r\n      || isUndefined(relationNames)\r\n      || (isArray(relationNames) && isEmpty(relationNames))) {\r\n      throw new Error(`Init resource '${ constructor.name }' error. @HateoasEmbeddedResource decorator param relationNames can not be null/undefined/empty, please pass a valid relationNames.`);\r\n    }\r\n\r\n    if (!isInstanceOfParent(constructor, EmbeddedResource)) {\r\n      throw new Error(`Init resource '${ constructor.name }' error. @HateoasEmbeddedResource decorator applied only to 'EmbeddedResource' type, you used it with ${ Object.getPrototypeOf(constructor) } type.`);\r\n    }\r\n    relationNames.forEach(relationName => {\r\n      ResourceUtils.EMBEDDED_RESOURCE_TYPE_MAP.set(relationName, constructor);\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Decorator used to create a projection representation of {@link Resource} heirs.\r\n *\r\n * @param resourceType type of resource that using for projection.\r\n * @param projectionName name of projection, will be used as projection request param.\r\n */\r\nexport function HateoasProjection(resourceType: new() => Resource, projectionName: string) {\r\n  return <T extends new(...args: any[]) => any>(constructor: T) => {\r\n    if (isNull(resourceType) || isUndefined(resourceType)) {\r\n      throw new Error(`Init resource projection '${ constructor.name }' error. @HateoasProjection decorator param resourceType can not be null/undefined, please pass a valid resourceType.`);\r\n    }\r\n    if (isNull(projectionName) || isUndefined(projectionName) || !projectionName) {\r\n      throw new Error(`Init resource projection '${ constructor.name }' error. @HateoasProjection decorator param projectionName can not be null/undefined/empty, please pass a valid projectionName.`);\r\n    }\r\n\r\n    if (!isInstanceOfParent(constructor, Resource)) {\r\n      throw new Error(`Init resource projection '${ constructor.name }' error. @HateoasProjection decorator applied only to 'Resource' type, you used it with ${ Object.getPrototypeOf(constructor) } type.`);\r\n    }\r\n    constructor['__resourceName__'] = resourceType['__resourceName__'];\r\n    constructor['__projectionName__'] = projectionName;\r\n    ResourceUtils.RESOURCE_NAME_PROJECTION_TYPE_MAP.set(resourceType['__resourceName__'].toLowerCase(), constructor);\r\n\r\n    return constructor;\r\n  };\r\n}\r\n\r\n/**\r\n * Decorator used to mark projection class properties that are resources and specifying class type used to create this relation.\r\n * This decorator used with class marked as {@link HateoasProjection}.\r\n *\r\n * @param relationType resource relation type that will be used to create resource with this type when parsed server response.\r\n */\r\nexport function ProjectionRel(relationType: new() => BaseResource) {\r\n  return (target: object, propertyKey: string) => {\r\n    if (isNull(relationType) || isUndefined(relationType)) {\r\n      throw new Error(`Init resource projection '${ target.constructor.name }' relation type error. @ProjectionRel decorator param relationType can not be null/undefined, please pass a valid relationType.`);\r\n    }\r\n\r\n    ResourceUtils.RESOURCE_PROJECTION_REL_NAME_TYPE_MAP.set(propertyKey, relationType);\r\n  };\r\n}\r\n\r\n\r\nfunction isInstanceOfParent(constructor: new (...args: any[]) => any, parentClass: any) {\r\n  if (Object.getPrototypeOf(constructor).name === '') {\r\n    return false;\r\n  }\r\n  if (Object.getPrototypeOf(constructor) === parentClass) {\r\n    return true;\r\n  }\r\n\r\n  return isInstanceOfParent(Object.getPrototypeOf(constructor), parentClass);\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgxHateoasClientConfigurationService } from './config/ngx-hateoas-client-configuration.service';\r\nimport { HateoasResourceService } from './service/external/hateoas-resource.service';\r\nimport { ResourceHttpService } from './service/internal/resource-http.service';\r\nimport { PagedResourceCollectionHttpService } from './service/internal/paged-resource-collection-http.service';\r\nimport { ResourceCollectionHttpService } from './service/internal/resource-collection-http.service';\r\nimport { CommonResourceHttpService } from './service/internal/common-resource-http.service';\r\nimport { ResourceCacheService } from './service/internal/cache/resource-cache.service';\r\n\r\nexport { NgxHateoasClientConfigurationService } from './config/ngx-hateoas-client-configuration.service';\r\nexport { Resource } from './model/resource/resource';\r\nexport { EmbeddedResource } from './model/resource/embedded-resource';\r\nexport { ResourceCollection } from './model/resource/resource-collection';\r\nexport { PagedResourceCollection } from './model/resource/paged-resource-collection';\r\nexport { Sort, SortOrder, Include, HttpMethod, ProjectionRelType, GetOption, PagedGetOption, RequestOption, RequestParam } from './model/declarations';\r\nexport { HateoasResourceOperation } from './service/external/hateoas-resource-operation';\r\nexport { HateoasResourceService } from './service/external/hateoas-resource.service';\r\nexport { HateoasResource, HateoasEmbeddedResource, HateoasProjection, ProjectionRel } from './model/decorators';\r\n\r\n@NgModule({\r\n  imports: []\r\n})\r\nexport class NgxHateoasClientModule {\r\n  static forRoot(): ModuleWithProviders<NgxHateoasClientModule> {\r\n    return {\r\n      ngModule: NgxHateoasClientModule,\r\n      providers: [\r\n        NgxHateoasClientConfigurationService,\r\n        CommonResourceHttpService,\r\n        ResourceHttpService,\r\n        ResourceCollectionHttpService,\r\n        PagedResourceCollectionHttpService,\r\n        HateoasResourceService,\r\n        ResourceCacheService\r\n      ]\r\n    };\r\n  }\r\n\r\n  constructor(config: NgxHateoasClientConfigurationService) {\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of ngx-hateoas-client\r\n */\r\n\r\nexport * from './lib/ngx-hateoas-client.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["observableOf","observableThrowError"],"mappings":"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"}